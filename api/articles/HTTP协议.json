{"title":"HTTP协议","uid":"6e271221aaa43fb7a2bf1b3992c80e53","slug":"HTTP协议","date":"2025-08-11T06:09:16.000Z","updated":"2025-08-12T12:15:32.930Z","comments":true,"path":"api/articles/HTTP协议.json","keywords":null,"cover":null,"content":"<p><strong>核心概念简述：</strong></p>\n<ol>\n<li><strong>HTTP (Hypertext Transfer Protocol - 超文本传输协议)：</strong> Web 的基石，是<strong>浏览器和服务器之间传输数据</strong>（主要是 HTML 文档、图片、CSS、JS、视频等）的一套规则。</li>\n<li><strong>静态页面 (Static Page)：</strong> <strong>内容固定</strong>的网页文件（通常是 <code>.html</code>, <code>.jpg</code>, <code>.css</code>, <code>.js</code>）。当用户请求时，服务器<strong>直接找到文件并原封不动地发送</strong>给浏览器。</li>\n<li><strong>动态页面 (Dynamic Page)：</strong> <strong>内容根据特定条件（用户、时间、数据库查询等）实时生成</strong>的网页。服务器收到请求后，需要<strong>运行程序或查询数据库</strong>，再将生成的结果（通常是 HTML）发送给浏览器。</li>\n<li><strong>中间件服务器 (Middleware Server &#x2F; Web Server &#x2F; Application Server &#x2F; Proxy)：</strong> 一个含义比较广泛的术语。在 Web 架构中，它通常指代<strong>介于客户端（浏览器）和最终内容源（文件服务器、应用服务器、数据库）之间的软件</strong>。它<strong>处理 HTTP 请求和响应</strong>，执行各种任务如路由、负载均衡、安全过滤、缓存、反向代理等。</li>\n</ol>\n<h1 id=\"一、-HTTP-协议详解\"><a href=\"#一、-HTTP-协议详解\" class=\"headerlink\" title=\"一、 HTTP 协议详解\"></a>一、 HTTP 协议详解</h1><p>HTTP 是 Web 的基础通信协议，遵循<strong>客户端-服务器</strong>模型，通常是<strong>请求-响应</strong>模式。</p>\n<ul>\n<li><strong>工作原理：</strong><ol>\n<li><strong>建立连接：</strong> 浏览器（客户端）根据 URL 解析出目标服务器地址和端口（通常 HTTP 是 80, HTTPS 是 443），尝试建立 TCP 连接（HTTP&#x2F;1.x）或 QUIC 连接（HTTP&#x2F;3）。</li>\n<li><strong>发送请求</strong>：客户端构造一个 HTTP 请求报文，通过建立的连接发送给服务器。请求报文包含：<ul>\n<li><strong>请求行：</strong> 包括 HTTP <strong>方法</strong> (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code> 等)、<strong>资源路径</strong> (URL 中的路径部分，如 <code>/index.html</code>)、<strong>HTTP 版本</strong> (<code>HTTP/1.1</code>, <code>HTTP/2</code>, <code>HTTP/3</code>)。</li>\n<li><strong>请求头 (Headers)：</strong> 提供关于请求的附加信息，如 <code>Host</code>（目标主机名）、<code>User-Agent</code>（浏览器类型）、<code>Accept</code>（客户端能处理的内容类型）、<code>Cookie</code>（携带状态信息）、<code>Authorization</code>（认证信息）、<code>Content-Type</code>（请求体类型, 用于 POST&#x2F;PUT）、<code>Content-Length</code>（请求体长度）等。</li>\n<li><strong>请求体 (Body - Optional)：</strong> 仅在某些方法（如 <code>POST</code>, <code>PUT</code>）中存在，用于传输提交的数据（如表单内容、文件、API 参数）。</li>\n</ul>\n</li>\n<li><strong>服务器处理：</strong> 服务器接收到请求后，根据请求方法、路径、头部信息和请求体，执行相应的操作（如读取文件、运行脚本、查询数据库）。</li>\n<li><strong>发送响应</strong>：服务器处理完成后，构造一个 HTTP 响应报文并发送给客户端。响应报文包含：<ul>\n<li><strong>状态行：</strong> 包括 <strong>HTTP 版本</strong>、<strong>状态码</strong>（如 <code>200 OK</code>, <code>404 Not Found</code>, <code>500 Internal Server Error</code>）、<strong>状态短语</strong>（对状态码的简短描述）。</li>\n<li><strong>响应头 (Headers)：</strong> 提供关于响应的信息，如 <code>Server</code>（服务器软件）、<code>Content-Type</code>（响应体类型，如 <code>text/html</code>）、<code>Content-Length</code>、<code>Cache-Control</code>（缓存指令）、<code>Set-Cookie</code>（设置 Cookie）、<code>Location</code>（重定向目标）等。</li>\n<li><strong>响应体 (Body - Optional)：</strong> 包含服务器返回的实际数据，如 HTML 内容、图片数据、JSON 或 XML 格式的 API 响应。对于成功的页面请求，通常就是浏览器要渲染的 HTML。</li>\n</ul>\n</li>\n<li><strong>关闭连接：</strong> （在 HTTP&#x2F;1.0 或非持久连接的情况下）响应发送完毕后，服务器会关闭 TCP 连接。在 HTTP&#x2F;1.1+ 及 HTTP&#x2F;2&#x2F;3 中，默认使用持久连接（keep-alive），可以在一个连接上发送多个请求和响应，提高效率。</li>\n</ol>\n</li>\n<li><strong>核心特性：</strong><ul>\n<li><strong>无状态 (Stateless)：</strong> 每个 HTTP 请求都是独立的，服务器默认不记录之前请求的任何信息。状态管理需通过 Cookie、Session、URL 参数、Token 等方式额外实现。</li>\n<li><strong>无连接 (Connectionless - 在 HTTP&#x2F;1.x 单请求模型中)：</strong> 每次请求都需要重新建立连接（HTTP&#x2F;1.1 默认是持久连接，弥补了这点）。HTTP&#x2F;2 的多路复用和 HTTP&#x2F;3 基于 UDP 进一步优化了连接效率。</li>\n<li><strong>灵活可扩展：</strong> 方法、状态码、Headers 定义了丰富的语义，可以传输任意类型数据。</li>\n<li><strong>HTTPS (HTTP Secure)：</strong> 在 HTTP 基础上加入 SSL&#x2F;TLS 协议层，提供加密传输和身份验证，保护数据安全和隐私。现在已成为主流和推荐实践（URL 以 <code>https://</code> 开头）。</li>\n<li><strong>基于文本（HTTP&#x2F;1.x）&#x2F; 二进制帧（HTTP&#x2F;2&#x2F;HTTP&#x2F;3）：</strong> HTTP&#x2F;1.x 报文是易读的文本格式；HTTP&#x2F;2&#x2F;3 为了提高效率和安全性，将通信分割为更小的二进制帧传输。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、-静态页面-Static-Pages\"><a href=\"#二、-静态页面-Static-Pages\" class=\"headerlink\" title=\"二、 静态页面 (Static Pages)\"></a>二、 静态页面 (Static Pages)</h1><ul>\n<li><strong>定义：</strong> 页面内容是预先编写好、存储在服务器硬盘上的文件（<code>.html</code>, <code>.css</code>, <code>.js</code>, <code>.jpg</code>, <code>.png</code>, <code>.pdf</code> 等）。<strong>每次用户请求该页面时，服务器返回的内容都完全相同</strong>，不会因用户身份、时间等因素而改变（除非开发者修改源文件并重新部署）。</li>\n<li><strong>工作原理：</strong><ol>\n<li>浏览器发送 HTTP <code>GET</code> 请求（如 <code>GET /about.html</code>）。</li>\n<li>Web服务器（如 Nginx, Apache）接收到请求。</li>\n<li>Web 服务器在配置的目录下查找名为 <code>about.html</code> 的文件。</li>\n<li>Web 服务器找到文件，将其内容读取到内存。</li>\n<li>Web 服务器构造 HTTP 响应（状态码 <code>200 OK</code>，<code>Content-Type: text/html</code>），将文件内容放入响应体。</li>\n<li>服务器通过 TCP&#x2F;IP 连接将响应发送回浏览器。</li>\n<li>浏览器接收到 HTML 文件并开始解析。如果 HTML 中引用了其他静态资源（如 <code>&lt;img src=&quot;images/logo.png&quot;&gt;</code>， <code>&lt;link href=&quot;styles/main.css&quot;&gt;</code>），浏览器会发送针对这些资源的额外 <code>GET</code> 请求，服务器重复步骤 2-6 来响应这些资源请求。</li>\n</ol>\n</li>\n<li><strong>优点：</strong><ul>\n<li><strong>极快的加载速度：</strong> 服务器只需读取磁盘文件并发送，几乎无需计算。非常容易被缓存（浏览器缓存、CDN 缓存）。</li>\n<li><strong>服务器压力小：</strong> 处理一个静态文件请求对服务器的 CPU、内存消耗非常低。单台服务器可以承载大量并发请求。</li>\n<li><strong>部署简单：</strong> 上传文件到服务器即可访问。</li>\n<li><strong>安全性高：</strong> 没有后端程序执行，遭受代码注入等攻击的可能性低。</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li><strong>缺乏灵活性：</strong> 内容固定，无法提供个性化体验（用户登录、用户偏好）、实时信息（股票价格、新闻评论）或基于用户交互更新内容。</li>\n<li><strong>维护困难（大型站点）：</strong> 如果内容需要大量更新，需要手动修改无数个文件。</li>\n</ul>\n</li>\n<li><strong>适用场景：</strong> 公司介绍页、文档、博客文章（除非需要评论）、图片、样式表、脚本文件、宣传页等不需要动态变化或个性化内容的地方。</li>\n</ul>\n<h1 id=\"三、-动态页面-Dynamic-Pages\"><a href=\"#三、-动态页面-Dynamic-Pages\" class=\"headerlink\" title=\"三、 动态页面 (Dynamic Pages)\"></a>三、 动态页面 (Dynamic Pages)</h1><ul>\n<li><strong>定义：</strong> 页面内容不是事先写死的，而是在<strong>用户请求时</strong>，由服务器上的<strong>程序实时生成</strong>的。同一个 URL 对不同用户或在不同时间访问，返回的内容可能完全不同。</li>\n<li><strong>工作原理：</strong><ol>\n<li>浏览器发送 HTTP 请求（通常是 <code>GET</code> 或 <code>POST</code>）。</li>\n<li><strong>Web服务器</strong>（如 Nginx, Apache）收到请求。<strong>URL 路径通常指向一个程序文件（如 <code>.php</code>, <code>.jsp</code>, <code>.py</code>）或由服务器配置的路由规则指定处理程序。</strong></li>\n<li><strong>Web 服务器将请求信息（路径、参数、Headers、请求体）移交给处理动态请求的中间件——通常是 <strong>应用服务器</strong>（如 Tomcat, uWSGI, Gunicorn, Node.js Runtime）或</strong>服务器端编程语言环境**（PHP-FPM, ASP.NET）。**</li>\n<li><strong>应用服务器加载并执行对应的程序&#x2F;脚本。</strong></li>\n<li>程序&#x2F;脚本执行业务逻辑：<ul>\n<li>读取 HTTP 请求数据（查询字符串、表单数据、Cookies）。</li>\n<li><strong>访问数据库</strong>查询或更新用户信息、产品数据等。</li>\n<li>调用其他 API 或服务。</li>\n<li>根据业务逻辑和获取到的数据<strong>动态生成 HTML 内容</strong>（或 JSON&#x2F;XML 等数据格式）。</li>\n</ul>\n</li>\n<li><strong>应用服务器将程序生成的输出（通常是 HTML 字符串）返回给 Web 服务器。</strong></li>\n<li><strong>Web 服务器将接收到的动态生成的 HTML 内容构造成一个标准的 HTTP 响应报文（状态码通常是 <code>200 OK</code>，<code>Content-Type: text/html</code>），通过连接发送回浏览器。</strong></li>\n<li>浏览器接收到 HTML 并开始渲染（如同处理静态 HTML 一样）。HTML 中引用的 JS&#x2F;CSS&#x2F;图片等静态资源仍需再次请求。</li>\n</ol>\n</li>\n<li><strong>实现技术：</strong><ul>\n<li><strong>服务器端脚本语言：</strong> PHP, Python (Django, Flask), Ruby (Ruby on Rails), JavaScript (Node.js), Java (JSP&#x2F;Servlets&#x2F;Spring), C# (ASP.NET)。</li>\n<li><strong>数据库：</strong> MySQL, PostgreSQL, MongoDB, Redis, Oracle 等用于存储和检索动态数据。</li>\n<li><strong>客户端交互：</strong> 现代动态页面通常会结合客户端 JavaScript (React, Vue.js, Angular) 进行<strong>富交互</strong>（单页应用 - SPA）。SPA 中，服务器首次可能提供一个基础 HTML 和大量 JS，之后 JS 通过 <strong>AJAX&#x2F;fetch API</strong> 向服务器发送请求获取<strong>纯数据（通常是 JSON）</strong> 并在浏览器端动态更新页面。但核心数据生成逻辑和 API 仍在服务器端。</li>\n</ul>\n</li>\n<li><strong>优点：</strong><ul>\n<li><strong>内容个性化：</strong> 针对不同用户（登录状态、偏好）展示不同内容。</li>\n<li><strong>实时性：</strong> 可以显示最新数据（新闻、社交媒体、股票）。</li>\n<li><strong>用户交互：</strong> 支持复杂的功能（搜索、购物车、在线支付、提交表单）。</li>\n<li><strong>易于内容更新：</strong> 通过数据库或后台管理界面更新内容，无需直接修改服务器文件。一次改动（如模板）可能影响许多页面。</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li><strong>加载速度较慢：</strong> 需要服务器端执行程序逻辑和数据库查询，耗时通常比读取静态文件长。</li>\n<li><strong>服务器压力大：</strong> 消耗 CPU、内存资源处理复杂逻辑和数据库交互。高并发时容易成为瓶颈。</li>\n<li><strong>开发和部署复杂：</strong> 需要编写和维护后端程序、数据库结构。</li>\n<li><strong>安全性挑战多：</strong> 面临 SQL 注入、跨站脚本 (XSS)、跨站请求伪造 (CSRF)、会话劫持等多种攻击威胁，需要额外安全防护。</li>\n</ul>\n</li>\n<li><strong>适用场景：</strong> 绝大多数现代 Web 应用：电商网站（产品列表、购物车、订单处理）、社交网络（用户信息流、好友动态）、搜索引擎（结果页）、邮件系统、在线银行、新闻网站（带评论）、博客（带评论&#x2F;后台管理）、用户登录系统等。</li>\n</ul>\n<h1 id=\"四、-中间件服务器-Middleware-Server-详解\"><a href=\"#四、-中间件服务器-Middleware-Server-详解\" class=\"headerlink\" title=\"四、 中间件服务器 (Middleware Server) 详解\"></a>四、 中间件服务器 (Middleware Server) 详解</h1><p>这个术语在 Web 架构中比较泛化，核心在于它在请求&#x2F;响应流中的位置和扮演的角色。它可以指代不同类型的组件：</p>\n<ol>\n<li><strong>主要作为 HTTP 请求处理者：</strong><ul>\n<li>Web 服务器： 这是最直接的角色。<ul>\n<li><strong>功能：</strong> 监听网络端口（通常是80和443），接收原始 HTTP 请求。</li>\n<li><strong>处理静态文件：</strong> 直接读取磁盘文件并返回（高效）。</li>\n<li><strong>代理动态请求：</strong> 识别需要动态处理的请求（如请求 <code>.php</code> 文件或特定路径 <code>/api/</code>），并将其<strong>反向代理</strong>或通过 <strong>FastCGI&#x2F;WSGI</strong> 等协议<strong>转发</strong>给后端的<strong>应用服务器</strong>（如 Tomcat, uWSGI, Node.js 应用， PHP-FPM）。</li>\n<li><strong>负载均衡：</strong> 如果有多台应用服务器，Web服务器可以将请求分发（负载均衡）到不同的后端服务器。</li>\n<li><strong>SSL&#x2F;TLS 终止：</strong> 处理 HTTPS 加密和解密，减轻后端服务器压力。</li>\n<li><strong>基础安全：</strong> 提供简单的访问控制、IP 黑白名单。</li>\n<li><strong>日志记录：</strong> 记录访问日志。</li>\n<li><strong>压缩：</strong> Gzip&#x2F;Brotli 压缩响应以节省带宽。</li>\n<li><strong>缓存：</strong> 缓存静态文件甚至动态内容的代理缓存。</li>\n</ul>\n</li>\n<li><strong>代表：</strong> <strong>Nginx</strong>, <strong>Apache HTTP Server</strong>, <strong>Caddy</strong>, LiteSpeed。</li>\n<li><strong>核心特点：</strong> 专注于高效处理网络 I&#x2F;O，管理连接，处理静态内容，代理动态请求。它们<strong>通常不直接执行用户编写的复杂业务逻辑代码</strong>（PHP&#x2F;Java&#x2F;Python 代码是在应用服务器或语言运行环境中执行的）。</li>\n</ul>\n</li>\n<li><strong>主要作为业务逻辑执行环境：</strong><ul>\n<li>应用服务器：<ul>\n<li><strong>功能：</strong> 专门执行服务器端应用程序代码（Java EE&#x2F;.NET&#x2F;Python&#x2F;Ruby&#x2F;Node.js&#x2F;Go 程序等）。</li>\n<li><strong>运行时环境：</strong> 提供程序运行所需的基础服务（如线程池管理、连接池管理、事务管理、安全管理）。</li>\n<li><strong>处理动态请求：</strong> 接收来自 Web 服务器（或直接处理请求）转发的请求，加载并运行<strong>处理特定业务逻辑</strong>的代码（如 Controller, Servlet, View）。</li>\n<li><strong>数据库交互：</strong> 应用程序代码在这里与数据库通信。</li>\n<li><strong>生成响应：</strong> 执行代码的结果是生成最终的响应数据（通常是 HTML 或 JSON），交给 Web 服务器或直接发送回客户端。</li>\n</ul>\n</li>\n<li><strong>代表：</strong> <strong>Apache Tomcat (Java Servlet&#x2F;JSP)</strong>, <strong>Jetty (Java)</strong>, <strong>WildFly&#x2F;JBoss (Java EE)</strong>, <strong>uWSGI (Python)</strong>, <strong>Gunicorn (Python)</strong>, <strong>Puma&#x2F;Unicorn (Ruby)</strong>, <strong>Node.js</strong> （本身既是平台也可作为应用服务器运行 JS）、<strong>.NET Runtime (ASP.NET)</strong>, <strong>GlassFish (Java EE)</strong>。</li>\n<li><strong>核心特点：</strong> 专注于执行业务逻辑代码。一个功能强大的应用服务器可以<strong>直接处理 HTTP 请求</strong>（直接监端口运行应用），<strong>但在生产环境中，更常见的做法是前面放一个 Nginx&#x2F;Apache 作为 Web 服务器&#x2F;反向代理来处理静态文件、负载均衡、SSL 等任务</strong>。</li>\n</ul>\n</li>\n<li><strong>更广义的中间件 (Web 中间件)：</strong><ul>\n<li><strong>功能：</strong> 这是在请求到达最终的处理程序（业务代码）之前或响应发送回客户端之前插入的软件层。专注于处理<strong>横切关注点</strong>。</li>\n<li><strong>常见任务：</strong><ul>\n<li><strong>路由：</strong> 根据请求路径、方法等决定由哪个处理程序或微服务来处理请求。</li>\n<li><strong>认证与授权：</strong> 检查用户是否有权限访问资源。</li>\n<li><strong>日志记录：</strong> 记录请求、响应相关信息。</li>\n<li><strong>请求转换：</strong> 修改请求内容（如数据格式转换）。</li>\n<li><strong>响应转换：</strong> 修改响应内容（如添加通用 Header、压缩）。</li>\n<li><strong>错误处理：</strong> 集中处理错误，返回统一格式的错误响应。</li>\n<li><strong>API 网关：</strong> 在微服务架构中，API 网关是核心中间件，负责路由、安全、限流、熔断、监控等。</li>\n<li><strong>服务网格 (Service Mesh) 边车代理：</strong> 如 Envoy, Linkerd。处理服务间的通信、负载均衡、服务发现、安全、监控等，作为每个服务实例的代理。严格意义上说它们处理的是服务间的请求，并非直接处理外部 HTTP 请求。</li>\n</ul>\n</li>\n<li><strong>代表：</strong> Express.js&#x2F;Koa 中的中间件函数、Spring MVC&#x2F;Spring Boot 的 Interceptor&#x2F;Filter、Nginx&#x2F;Apache 的部分模块和配置、专用 API 网关（Kong, Apigee, Zuul）、消息队列组件也可以算作后台中间件。</li>\n<li><strong>核心特点：</strong> <strong>可插拔性</strong>，专注于处理跨多个处理程序的公共任务。</li>\n</ul>\n</li>\n</ol>\n","text":"核心概念简述： HTTP (Hypertext Transfer Protocol - 超文本传输协议)： Web 的基石，是浏览器和服务器之间传输数据（主要是...","permalink":"/post/HTTP协议","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Web","slug":"Web","count":3,"path":"api/tags/Web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81-HTTP-%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">一、 HTTP 协议详解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2-Static-Pages\"><span class=\"toc-text\">二、 静态页面 (Static Pages)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81-%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2-Dynamic-Pages\"><span class=\"toc-text\">三、 动态页面 (Dynamic Pages)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81-%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8-Middleware-Server-%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">四、 中间件服务器 (Middleware Server) 详解</span></a></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Web_Day01","uid":"02f95acb41d18d29287f790c3323f9ab","slug":"Web-Day01","date":"2025-08-11T08:05:13.000Z","updated":"2025-08-20T07:42:30.271Z","comments":true,"path":"api/articles/Web-Day01.json","keywords":null,"cover":[],"text":"练习1、在各大招聘平台搜索网安岗位名称，填充岗位技能要求安全服务工程师windows，网络、Linux web/网页漏洞 编程语言 1、对安全技术和理念有一定理...","permalink":"/post/Web-Day01","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"Web练习","slug":"Web练习","count":8,"path":"api/tags/Web练习.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux基础综合练习2","uid":"787fb5eaa60e82359b7afd58d35677cd","slug":"Linux基础综合练习2","date":"2025-08-08T06:13:15.000Z","updated":"2025-08-09T06:59:29.367Z","comments":true,"path":"api/articles/Linux基础综合练习2.json","keywords":null,"cover":[],"text":"1、使用反弹的shell创建uid为0的账户，非交互设置密码12useradd -o -u 0 testecho \"test:wyf153135\" | chpa...","permalink":"/post/Linux基础综合练习2","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":15,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}