{"title":"day13-test","uid":"0c3e8d5785c978b0561e8f3dd89f9941","slug":"day13-test","date":"2025-08-27T07:58:17.000Z","updated":"2025-09-02T07:47:32.426Z","comments":true,"path":"api/articles/day13-test.json","keywords":null,"cover":[],"content":"<h2 id=\"1、演示csrf漏洞配合存储型XSS修改其他用户密码\"><a href=\"#1、演示csrf漏洞配合存储型XSS修改其他用户密码\" class=\"headerlink\" title=\"1、演示csrf漏洞配合存储型XSS修改其他用户密码\"></a>1、演示csrf漏洞配合存储型XSS修改其他用户密码</h2><p>DVWA靶场5个默认用户名密码：</p>\n<p>admin&#x2F;password<br>gordonb&#x2F;abc123<br>1337&#x2F;charley<br>pablo&#x2F;letmein<br>smithy&#x2F;password</p>\n<p>登录admin用户，在CSRF靶场上修改密码为123456，确认一次后提交</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162001712.png\" alt=\"image-20250827162001712\"></p>\n<p>修改成功后得到上面一串URL地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162028585.png\" alt=\"image-20250827162028585\"></p>\n<p>将得到的URL地址作为XSS攻击DVWA靶场，由于前端做了长度限制，直接修改前端代码，用<code>&lt;img&gt;</code>标签进行攻击，这样有用户访问的时候，密码就会修改</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162326954.png\" alt=\"image-20250827162326954\"></p>\n<p>攻击成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162448181.png\" alt=\"image-20250827162448181\"></p>\n<p>现在切换用户进行登录gordonb&#x2F;abc123</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162542970.png\" alt=\"image-20250827162542970\"></p>\n<p>成功登录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162627307.png\" alt=\"image-20250827162627307\"></p>\n<p>并且可以看到post包里用户名密码是gordonb&#x2F;abc123</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162706753.png\" alt=\"image-20250827162706753\"></p>\n<p>现在访问刚才的留言页面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162748872.png\" alt=\"image-20250827162748872\"></p>\n<p>修改密码已经执行，退出登录后重新登录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162847140.png\" alt=\"image-20250827162847140\"></p>\n<p>会显示登录失败，抓包分析原先密码已经不能登录成功了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827162957019.png\" alt=\"image-20250827162957019\"></p>\n<p>尝试使用123456进行登录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827163040392.png\" alt=\"image-20250827163040392\"></p>\n<p>登录成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827163102725.png\" alt=\"image-20250827163102725\"></p>\n<p>抓包看出密码已经变成123456了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827163135597.png\" alt=\"image-20250827163135597\"></p>\n<h2 id=\"2、使用ssrf漏洞读取操作系统敏感文件\"><a href=\"#2、使用ssrf漏洞读取操作系统敏感文件\" class=\"headerlink\" title=\"2、使用ssrf漏洞读取操作系统敏感文件\"></a>2、使用ssrf漏洞读取操作系统敏感文件</h2><p>首先打开pikachu靶场的SSRF（curl）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827164320764.png\" alt=\"image-20250827164320764\"></p>\n<p>点击进入，可以发现URL地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827164408570.png\" alt=\"image-20250827164408570\"></p>\n<p>修改参数?url&#x3D;file:&#x2F;&#x2F;c:\\windows\\system32\\drivers\\etc\\hosts，可以看到目标主机上的敏感文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827164143301.png\" alt=\"image-20250827164143301\"></p>\n<h2 id=\"3、演示文件包含漏洞配合图片木马的使用过程\"><a href=\"#3、演示文件包含漏洞配合图片木马的使用过程\" class=\"headerlink\" title=\"3、演示文件包含漏洞配合图片木马的使用过程\"></a>3、演示文件包含漏洞配合图片木马的使用过程</h2><p>创建一个带有一句话木马的图片文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827192803482.png\" alt=\"image-20250827192803482\"></p>\n<p>将生成的图片马复制进虚拟机，打开文件包含漏洞靶场，修改filename后面参数为<code>..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Users\\x\\Desktop\\yjh.jpg</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827193943329.png\" alt=\"image-20250827193943329\"></p>\n<h2 id=\"4、演示文件包含和文件读取的区别\"><a href=\"#4、演示文件包含和文件读取的区别\" class=\"headerlink\" title=\"4、演示文件包含和文件读取的区别\"></a>4、演示文件包含和文件读取的区别</h2><p>创建文件 phpinfo.php 和 phpinfo.txt</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827195158588.png\" alt=\"image-20250827195158588\"></p>\n<p>创建 fileread.php 放在 Web 路径下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827194943518.png\" alt=\"image-20250827194943518\"></p>\n<p>访问 fileread.php ，get传递参数<code>?filename=phpinfo.txt</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827195036366.png\" alt=\"image-20250827195036366\"></p>\n<p>查看网页源代码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250827195142338.png\" alt=\"image-20250827195142338\"></p>\n<p>后面的<code>&lt;?php phpinfo();?&gt;</code>被当作 html 执行</p>\n<p>文件包含与文件读取的区别在于文件包含会把文件以执行的方式打开，文件读取是以记事本形式读取</p>\n<h2 id=\"5、背诵面试题以及答案，记忆项目实施过程中可能的问题和处理办法\"><a href=\"#5、背诵面试题以及答案，记忆项目实施过程中可能的问题和处理办法\" class=\"headerlink\" title=\"5、背诵面试题以及答案，记忆项目实施过程中可能的问题和处理办法\"></a>5、背诵面试题以及答案，记忆项目实施过程中可能的问题和处理办法</h2>","feature":true,"text":"1、演示csrf漏洞配合存储型XSS修改其他用户密码DVWA靶场5个默认用户名密码： admin/passwordgordonb/abc1231337/char...","permalink":"/post/day13-test","photos":[],"count_time":{"symbolsCount":992,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"练习","slug":"练习","count":14,"path":"api/tags/练习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%BC%94%E7%A4%BAcsrf%E6%BC%8F%E6%B4%9E%E9%85%8D%E5%90%88%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E4%BF%AE%E6%94%B9%E5%85%B6%E4%BB%96%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">1、演示csrf漏洞配合存储型XSS修改其他用户密码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BD%BF%E7%94%A8ssrf%E6%BC%8F%E6%B4%9E%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、使用ssrf漏洞读取操作系统敏感文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E9%85%8D%E5%90%88%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">3、演示文件包含漏洞配合图片木马的使用过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%92%8C%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4、演示文件包含和文件读取的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%83%8C%E8%AF%B5%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BB%A5%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E8%AE%B0%E5%BF%86%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%AF%E8%83%BD%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">5、背诵面试题以及答案，记忆项目实施过程中可能的问题和处理办法</span></a></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"PHP反序列化漏洞","uid":"5a956768fe7e07e1b6347758b40c6d53","slug":"PHP反序列化漏洞","date":"2025-09-02T01:33:58.000Z","updated":"2025-09-02T07:16:31.044Z","comments":true,"path":"api/articles/PHP反序列化漏洞.json","keywords":null,"cover":null,"text":"PHP反序列化漏洞序列化与反序列化 是为了保证脆弱数据在互联网上完整安全的传输，如果开发者使用官方的函数不进行其他操作，那么就不会存在反序列化漏洞 漏洞成因：攻...","permalink":"/post/PHP反序列化漏洞","photos":[],"count_time":{"symbolsCount":119,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Web渗透","slug":"Web渗透","count":1,"path":"api/tags/Web渗透.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Rust与Java在并发安全上的对比","uid":"1e5549aba23c836b488cd4ec215c029b","slug":"Rust与Java在并发安全上的对比","date":"2025-08-26T12:50:50.000Z","updated":"2025-08-26T12:51:28.044Z","comments":true,"path":"api/articles/Rust与Java在并发安全上的对比.json","keywords":null,"cover":null,"text":"Rust与Java在并发安全上的对比核心安全机制 Rust： 类型系统强制执行： 在编译时由 Rust 编译器严格检查。违反规则会导致编译错误。 并发安全 (S...","permalink":"/post/Rust与Java在并发安全上的对比","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Rust","slug":"Rust","count":2,"path":"api/tags/Rust.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}