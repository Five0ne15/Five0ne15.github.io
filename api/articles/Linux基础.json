{"title":"Linux基础","uid":"144f0b4d9b9f80ea377106e9c6a54a45","slug":"Linux基础","date":"2025-07-29T02:38:02.000Z","updated":"2025-07-29T13:30:44.099Z","comments":true,"path":"api/articles/Linux基础.json","keywords":null,"cover":null,"content":"<h1 id=\"Linux基础内容\"><a href=\"#Linux基础内容\" class=\"headerlink\" title=\"Linux基础内容\"></a>Linux基础内容</h1><h2 id=\"一、计算机基础\"><a href=\"#一、计算机基础\" class=\"headerlink\" title=\"一、计算机基础\"></a>一、计算机基础</h2><h3 id=\"1、信息表示\"><a href=\"#1、信息表示\" class=\"headerlink\" title=\"1、信息表示\"></a>1、信息表示</h3><ul>\n<li><strong>比特：</strong> 信息的基本单位（0 或 1）。</li>\n<li><strong>二进制系统：</strong> 计算机内部所有信息（数字、文本、图像、声音、视频、指令）都用二进制数（0 和 1 的组合）表示。</li>\n<li><strong>编码：</strong> 信息转换为二进制的过程（如 ASCII, Unicode 编码字符， JPEG 编码图像， MP3 编码声音）。</li>\n</ul>\n<h3 id=\"2、冯·诺依曼体系结构（现代计算机的基石）\"><a href=\"#2、冯·诺依曼体系结构（现代计算机的基石）\" class=\"headerlink\" title=\"2、冯·诺依曼体系结构（现代计算机的基石）\"></a>2、冯·诺依曼体系结构（现代计算机的基石）</h3><ul>\n<li><strong>核心思想：</strong> 存储程序概念。</li>\n<li><strong>五大部件</strong>：<ul>\n<li><strong>输入设备：</strong> 接收外部数据&#x2F;指令（键盘、鼠标、麦克风、摄像头、传感器）。</li>\n<li><strong>输出设备：</strong> 向外界呈现结果（显示器、打印机、扬声器）。</li>\n<li><strong>运算器：</strong> 执行算术运算和逻辑运算。</li>\n<li><strong>控制器：</strong> 协调指挥各部件的运作，取指令、解码指令、执行指令。</li>\n<li><strong>存储器</strong>：<ul>\n<li><strong>内存：</strong> 速度快、容量较小、易失性（断电数据丢失）。存放当前运行的程序和数据（RAM：Random Access Memory）。</li>\n<li><strong>外存：</strong> 速度慢、容量大、非易失性（断电数据保留）。长期存储程序和数据（硬盘、固态硬盘SSD、U盘、光盘）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、硬件：计算机的物理组成部分。\"><a href=\"#3、硬件：计算机的物理组成部分。\" class=\"headerlink\" title=\"3、硬件：计算机的物理组成部分。\"></a>3、硬件：计算机的物理组成部分。</h3><ul>\n<li><strong>中央处理器：</strong> 计算机的“大脑”，包含运算器和控制器。核心指标：主频、核心数、缓存大小。</li>\n<li><strong>内存：</strong> 供 CPU 直接访问的高速工作区 (RAM)。</li>\n<li><strong>主板：</strong> 连接所有部件的“骨架”，包含各种接口、芯片组、总线等。</li>\n<li><strong>存储设备：</strong> 硬盘驱动器、固态硬盘、U 盘等。</li>\n<li><strong>输入设备：</strong> 如上述。</li>\n<li><strong>输出设备：</strong> 如上述。</li>\n<li><strong>扩展卡：</strong> 显卡、声卡、网卡等。</li>\n<li><strong>电源：</strong> 提供稳定电力。</li>\n</ul>\n<h3 id=\"4、软件：计算机运行的指令-程序集合。硬件是躯体，软件是灵魂。\"><a href=\"#4、软件：计算机运行的指令-程序集合。硬件是躯体，软件是灵魂。\" class=\"headerlink\" title=\"4、软件：计算机运行的指令&#x2F;程序集合。硬件是躯体，软件是灵魂。\"></a>4、软件：计算机运行的指令&#x2F;程序集合。硬件是躯体，软件是灵魂。</h3><ul>\n<li><strong>系统软件</strong>：<ul>\n<li><strong>操作系统：</strong> 管理硬件资源、提供用户&#x2F;应用程序接口、是软硬件沟通的桥梁（如：Windows, macOS, Linux, Android, iOS）。核心功能：进程管理、内存管理、文件管理、设备管理、用户界面。</li>\n<li><strong>驱动程序：</strong> 使操作系统能与特定硬件设备通信的软件。</li>\n<li><strong>实用工具：</strong> 辅助管理计算机的工具（如：磁盘清理、杀毒软件）。</li>\n</ul>\n</li>\n<li><strong>应用软件：</strong> 为用户完成特定任务的程序（如：浏览器、办公软件、游戏、媒体播放器、图像处理软件）。</li>\n</ul>\n<h3 id=\"5、数据与程序\"><a href=\"#5、数据与程序\" class=\"headerlink\" title=\"5、数据与程序\"></a>5、数据与程序</h3><ul>\n<li><strong>数据：</strong> 计算机处理的原始材料（未经处理的信息）。</li>\n<li><strong>程序：</strong> 一系列指令的集合，告诉计算机如何处理数据。</li>\n<li><strong>指令：</strong> 计算机执行的最小操作单位（如：加、减、移动数据）。</li>\n</ul>\n<h3 id=\"6、CPU的架构\"><a href=\"#6、CPU的架构\" class=\"headerlink\" title=\"6、CPU的架构\"></a>6、CPU的架构</h3><p>​\t\t前面说过的，CPU其实内部已经含有一些微指令，我们所使用的软件都要经过CPU内部 的微指令集来达成才行。 那这些指令集的设计主要又被分为两种设计理念，这就是目前世界 上常见到的两种主要CPU架 构，分别是：<strong>精简指令集</strong>（RISC）与<strong>复杂指令集</strong>（CISC）系统。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>特征</strong></th>\n<th align=\"center\"><strong>精简指令集 (RISC)</strong></th>\n<th align=\"center\"><strong>复杂指令集 (CISC)</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>设计目标</strong></td>\n<td align=\"center\">简化指令以提高单周期执行效率</td>\n<td align=\"center\">减少程序代码量，贴近高级语言操作</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>指令复杂度</strong></td>\n<td align=\"center\"><strong>简单</strong>：指令长度固定，功能单一（如<code>LOAD/STORE</code>）</td>\n<td align=\"center\"><strong>复杂</strong>：支持多功能指令（如单条指令实现字符串处理）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>指令长度</strong></td>\n<td align=\"center\">固定（通常32位）</td>\n<td align=\"center\">可变（1至15字节不等）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>寄存器数量</strong></td>\n<td align=\"center\"><strong>多</strong>（数十至数百个），减少内存访问</td>\n<td align=\"center\"><strong>较少</strong>，依赖内存操作</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>执行方式</strong></td>\n<td align=\"center\"><strong>单周期指令</strong>为主，流水线深度优化</td>\n<td align=\"center\">复杂指令需<strong>多周期</strong>执行（微程序控制）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>代码密度</strong></td>\n<td align=\"center\">较低（相同功能需更多指令）</td>\n<td align=\"center\"><strong>较高</strong>（单条指令完成复杂任务）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>典型架构</strong></td>\n<td align=\"center\">ARM（手机&#x2F;嵌入式）、RISC-V、MIPS、PowerPC</td>\n<td align=\"center\">x86（Intel&#x2F;AMD桌面&#x2F;服务器）、z&#x2F;Architecture（IBM大型机）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>编译器作用</strong></td>\n<td align=\"center\"><strong>关键</strong>：负责指令调度和效率优化</td>\n<td align=\"center\">简化编译（复杂指令直接映射高级操作）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>选择精简指令集（RISC）的场景</strong>：追求高能效比（手机&#x2F;物联网）、定制化需求（RISC-V开源生态）。</li>\n<li><strong>选择复杂指令集 (CISC)的场景</strong>：兼容历史代码（x86生态）、高代码密度（存储成本敏感型系统）。</li>\n<li><strong>未来方向</strong>：两者在设计上持续趋同，<strong>效率、功耗、灵活性</strong>的平衡成为关键。</li>\n</ul>\n<h3 id=\"7、操作系统\"><a href=\"#7、操作系统\" class=\"headerlink\" title=\"7、操作系统\"></a>7、操作系统</h3><p><strong>定义</strong>：操作系统是管理计算机硬件与软件资源的<strong>系统软件</strong>，扮演<strong>中介者</strong>角色：直接控制CPU、内存、磁盘、网络等硬件；为应用程序（如浏览器、游戏）提供运行环境和服务。​<strong>本质</strong>​：​<strong>资源的超级管家</strong>​（硬件资源 + 软件协调）。</p>\n<h4 id=\"（1）进程管理（Process-Management）\"><a href=\"#（1）进程管理（Process-Management）\" class=\"headerlink\" title=\"（1）进程管理（Process Management）\"></a><strong>（1）进程管理（Process Management）</strong></h4><ul>\n<li><strong>进程</strong>：运行中的程序实例（需CPU、内存等资源）。</li>\n<li><strong>核心任务：</strong><ul>\n<li><strong>创建&#x2F;销毁进程</strong></li>\n<li><strong>进程调度</strong>：分配CPU时间片（算法如：先来先服务FCFS、轮转调度RR、优先级调度）</li>\n<li><strong>进程同步</strong>：解决并发冲突（如信号量、互斥锁）</li>\n<li><strong>进程通信</strong>：进程间数据交换（IPC机制）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（2）内存管理（Memory-Management）\"><a href=\"#（2）内存管理（Memory-Management）\" class=\"headerlink\" title=\"（2）内存管理（Memory Management）\"></a>（2）内存管理（Memory Management）</h4><ul>\n<li><strong>核心任务：</strong><ul>\n<li><strong>分配&#x2F;回收内存</strong>：为进程动态分配空间（如堆、栈）。</li>\n<li><strong>虚拟内存</strong>：将硬盘空间虚拟为内存，解决物理内存不足（通过分页&#x2F;分段技术）。</li>\n<li><strong>内存保护</strong>：防止进程越权访问内存（如MMU硬件支持）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（3）文件系统管理（File-System-Management）\"><a href=\"#（3）文件系统管理（File-System-Management）\" class=\"headerlink\" title=\"（3）文件系统管理（File System Management）\"></a>（3）<strong>文件系统管理（File System Management）</strong></h4><ul>\n<li><strong>文件</strong>：存储在磁盘上的数据逻辑单元（文本、图片等）。</li>\n<li><strong>核心任务：</strong><ul>\n<li><strong>组织文件</strong>：目录树结构（如Windows的C:\\、Linux的&#x2F;）。</li>\n<li><strong>读写控制</strong>：提供open&#x2F;read&#x2F;write等API。</li>\n<li><strong>磁盘空间管理</strong>：分配块、碎片整理（如NTFS、EXT4文件系统）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（4）设备管理（I-O-Device-Management）\"><a href=\"#（4）设备管理（I-O-Device-Management）\" class=\"headerlink\" title=\"（4）设备管理（I&#x2F;O Device Management）**\"></a>（4）设备管理（I&#x2F;O Device Management）**</h4><ul>\n<li><strong>核心任务：</strong><ul>\n<li><strong>设备驱动</strong>：为打印机、键盘等硬件提供统一接口。</li>\n<li><strong>缓冲区管理</strong>：优化慢速设备与CPU的速率差异（如磁盘缓存）。</li>\n<li><strong>即插即用</strong>：动态识别设备（如USB热插拔）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"（5）安全与权限管理（Security-Protection）\"><a href=\"#（5）安全与权限管理（Security-Protection）\" class=\"headerlink\" title=\"（5）安全与权限管理（Security &amp; Protection）**\"></a>（5）安全与权限管理（Security &amp; Protection）**</h4><ul>\n<li><strong>用户认证</strong>：登录密码、生物识别。</li>\n<li><strong>访问控制</strong>：文件权限（如Linux的rwx权限位）。</li>\n<li><strong>防火墙与加密</strong>：防止外部攻击（如Windows Defender）。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>模块</strong></th>\n<th align=\"center\"><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>内核（Kernel）</strong></td>\n<td align=\"center\">核心代码，直接操作硬件（进程调度、中断处理、内存映射）。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>系统调用接口</strong></td>\n<td align=\"center\">应用程序访问内核服务的接口（如Linux的<code>syscall</code>、Windows的API）。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>用户界面</strong></td>\n<td align=\"center\">用户与系统交互的入口（GUI图形界面如Windows桌面 &#x2F; CLI命令行如Linux终端）。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>系统工具</strong></td>\n<td align=\"center\">内置实用程序（任务管理器、磁盘清理、网络配置工具）。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>驱动程序</strong></td>\n<td align=\"center\">硬件厂商提供的设备控制软件（如NVIDIA显卡驱动）。</td>\n</tr>\n</tbody></table>\n<h3 id=\"8、内核Kernel\"><a href=\"#8、内核Kernel\" class=\"headerlink\" title=\"8、内核Kernel\"></a>8、内核Kernel</h3><p><strong>内核（Kernel）</strong> 是操作系统的<strong>最核心组件</strong>，直接运行在硬件之上，负责管理系统最底层的资源和关键功能。它如同计算机的“中枢神经系统”，是所有软硬件交互的必经之路。</p>\n<h4 id=\"内核的核心职责\"><a href=\"#内核的核心职责\" class=\"headerlink\" title=\"内核的核心职责\"></a><strong>内核的核心职责</strong></h4><ol>\n<li><strong>硬件抽象与管理</strong><ul>\n<li>直接操作 <strong>CPU、内存、磁盘、网络设备</strong> 等物理硬件。</li>\n<li>为上层软件提供统一的资源访问接口（如内存分配、磁盘读写），<strong>隐藏硬件差异</strong>。</li>\n</ul>\n</li>\n<li><strong>进程调度</strong><ul>\n<li>决定哪个进程使用 <strong>CPU</strong>、何时使用、使用多久。</li>\n<li>通过调度算法（如 <strong>CFS（Linux完全公平调度器）</strong>）平衡效率与公平性。</li>\n</ul>\n</li>\n<li><strong>内存管理</strong><ul>\n<li>分配&#x2F;回收物理内存和虚拟内存空间。</li>\n<li>实现 <strong>虚拟内存机制</strong>（通过分页&#x2F;分段技术将硬盘空间扩展为“虚拟RAM”）。</li>\n</ul>\n</li>\n<li><strong>中断与异常处理</strong><ul>\n<li>响应硬件中断（如键盘按下、网络数据到达）和软件异常（如除零错误）。</li>\n<li>每秒处理数万次中断（如系统时钟中断频率通常为 <strong>100–1000 Hz</strong>）。</li>\n</ul>\n</li>\n<li><strong>系统调用接口（Syscall）</strong><ul>\n<li>提供应用程序访问内核功能的唯一通道（如文件操作 <code>open()</code>、进程创建 <code>fork()</code>）。</li>\n<li><strong>用户程序无法直接操作硬件</strong>，必须通过内核“代办”。</li>\n</ul>\n</li>\n<li><strong>设备驱动管理</strong><ul>\n<li>集成设备驱动程序（如显卡、声卡驱动），协调硬件与软件的通信。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"内核工作流程示例：启动程序\"><a href=\"#内核工作流程示例：启动程序\" class=\"headerlink\" title=\"内核工作流程示例：启动程序\"></a><strong>内核工作流程示例：启动程序</strong></h4><ol>\n<li>用户双击应用图标 → Shell调用 <code>exec()</code> 系统调用。</li>\n<li>内核切换到内核态：<ul>\n<li>分配内存空间 → 装载程序代码 → 创建新进程 → 调度CPU执行。</li>\n</ul>\n</li>\n<li>程序运行时调用 printf() → 触发 write() 系统调用 → 内核将数据发送到终端。</li>\n<li>程序结束 → 内核回收内存，更新进程状态。</li>\n</ol>\n<p>例如：想要在电脑上播放音乐：</p>\n<p>1、内核让播放器占用CPU</p>\n<p>2、声卡驱动让数字信号变成电信号</p>\n<h3 id=\"9、文件系统\"><a href=\"#9、文件系统\" class=\"headerlink\" title=\"9、文件系统\"></a>9、文件系统</h3><p><strong>文件系统（File System）</strong> 是操作系统用来<strong>组织、存储和管理数据</strong>的核心机制。它定义了数据如何被命名、存储、检索及更新，将硬盘的原始存储空间转化为用户和程序可理解的<strong>逻辑结构（文件与目录）</strong>。</p>\n<h4 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a><strong>核心功能</strong></h4><ol>\n<li><strong>命名与组织</strong><ul>\n<li><strong>文件</strong>：存储数据的逻辑单元（文本、图片等），通过文件名（如 <code>report.txt</code>）标识。</li>\n<li><strong>目录（文件夹）</strong>：分层结构（如 <code>/home/user/docs/</code>），实现文件分类管理。</li>\n<li><strong>路径</strong>：定位文件的唯一标识（如 Linux 的 <code>/etc/config</code>，Windows 的 <code>C:\\Program Files</code>）。</li>\n</ul>\n</li>\n<li><strong>数据存储与寻址</strong><ul>\n<li><strong>块（Block）</strong>：物理存储的最小单位（通常 4KB）。</li>\n<li><strong>文件分割</strong>：大文件被拆分为多个块，分散存储在磁盘不同位置。</li>\n<li><strong>元数据（Metadata）</strong>：记录文件属性（名称、大小、创建时间、权限、存储位置等）。<ul>\n<li><em>例如</em>：Linux 的 <code>inode</code> 存储元数据，但不包含文件名（文件名在目录中记录）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>空间管理</strong><ul>\n<li><strong>分配策略</strong>：标记已用&#x2F;空闲块（位图法、链表法）。</li>\n<li><strong>碎片处理</strong>：<ul>\n<li>外部碎片：空闲块分散 → <strong>碎片整理</strong>（Defragmentation）合并连续空间。</li>\n<li>内部碎片：块未充分利用（如 1KB 文件占用 4KB 块）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>数据可靠性与恢复</strong><ul>\n<li><strong>日志（Journaling）</strong>：记录操作意图（如 <code>ext4</code> 的日志），崩溃后恢复一致性。</li>\n<li><strong>冗余备份</strong>：RAID、副本机制（如 ZFS 的 Copy-on-Write）。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"主流文件系统对比\"><a href=\"#主流文件系统对比\" class=\"headerlink\" title=\"主流文件系统对比\"></a><strong>主流文件系统对比</strong></h4><table>\n<thead>\n<tr>\n<th><strong>FAT32</strong></th>\n<th>U盘、老式设备</th>\n<th>跨平台（Win&#x2F;macOS&#x2F;Linux通用）</th>\n<th>单文件≤4GB，无日志、易碎片化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>NTFS</strong></td>\n<td>Windows 主磁盘</td>\n<td>支持大文件（16EB）、ACL权限控制</td>\n<td>macOS&#x2F;Linux 写入需额外驱动</td>\n</tr>\n<tr>\n<td><strong>exFAT</strong></td>\n<td>闪存设备（SD卡）</td>\n<td>轻量级、大文件支持（64ZB）</td>\n<td>无日志、数据恢复能力弱</td>\n</tr>\n<tr>\n<td><strong>ext4</strong></td>\n<td>Linux 主系统</td>\n<td>日志可靠、支持64位存储（1EB）</td>\n<td>Windows 不原生支持</td>\n</tr>\n<tr>\n<td><strong>APFS</strong></td>\n<td>macOS&#x2F;iOS</td>\n<td>针对SSD优化（写时复制）、加密强</td>\n<td>不兼容传统机械硬盘</td>\n</tr>\n<tr>\n<td><strong>ZFS</strong></td>\n<td>企业级存储</td>\n<td>自愈校验、实时压缩、快照克隆</td>\n<td>内存占用高、复杂度大</td>\n</tr>\n</tbody></table>\n<p>例如：在保存一个文件时：</p>\n<p>1、文件系统决定把它存放在哪 </p>\n<p>2、下次打开的时候，能够快速找到</p>\n<h3 id=\"10、用户界面UI\"><a href=\"#10、用户界面UI\" class=\"headerlink\" title=\"10、用户界面UI\"></a>10、用户界面UI</h3><p><strong>用户界面（User Interface, UI）</strong> 是人与计算机系统之间进行<strong>信息交换的媒介</strong>，是用户感知并操作数字世界的“窗口”。其核心目标是通过直观的交互方式降低技术使用门槛，让用户高效、无痛地达成目标。</p>\n<h4 id=\"UI的核心作用\"><a href=\"#UI的核心作用\" class=\"headerlink\" title=\"UI的核心作用\"></a><strong>UI的核心作用</strong></h4><p>​\t<strong>1、信息展示</strong></p>\n<ul>\n<li>将计算机处理的数据转化为人类可理解的视觉&#x2F;听觉&#x2F;触觉反馈（如文字、图标、声音提示）。</li>\n</ul>\n<p>​\t<strong>2、操作入口</strong></p>\n<ul>\n<li>提供用户向系统发送指令的途径（点击按钮、语音命令、手势等）。</li>\n</ul>\n<p>​\t<strong>3、降低认知负荷</strong></p>\n<ul>\n<li>通过符合直觉的设计减少用户学习成本（如回收站图标表示删除文件恢复）。</li>\n</ul>\n<h4 id=\"UI的三大类型\"><a href=\"#UI的三大类型\" class=\"headerlink\" title=\"UI的三大类型\"></a><strong>UI的三大类型</strong></h4><p><strong>1.命令行界面（CLI - Command Line Interface）</strong></p>\n<ul>\n<li><strong>形式</strong>：用户输入文本指令（如 <code>rm -rf file.txt</code>）。</li>\n<li><strong>场景</strong>：服务器运维、开发者调试（Linux终端、Windows CMD）。</li>\n<li><strong>优点</strong>：高灵活性、可脚本化批量操作。</li>\n<li><strong>缺点</strong>：需记忆命令语法，对新手极不友好。<br><em>示例：黑客电影中快速滚动的黑色终端窗口即CLI。</em></li>\n</ul>\n<p><strong>2.图形用户界面（GUI - Graphical User Interface）</strong></p>\n<ul>\n<li><strong>形式</strong>：视觉化元素（窗口、图标、菜单、按钮）。</li>\n<li><strong>交互方式</strong>：鼠标点击、键盘快捷键、触控手势。</li>\n<li><strong>场景</strong>：桌面操作系统（Windows&#x2F;macOS）、手机APP、网页。</li>\n<li><strong>关键组件</strong>：<ul>\n<li><strong>WIMP范式</strong>：窗口（Window）、图标（Icon）、菜单（Menu）、指针（Pointer）。</li>\n<li><strong>控件库</strong>：按钮、输入框、滑块、复选框等。</li>\n</ul>\n</li>\n<li><strong>优点</strong>：直观易学，适合大众用户。<br><em>示例：Windows桌面就是GUI的典型，拖动文件&#x3D;用户向系统发出移动数据指令。</em></li>\n</ul>\n<p><strong>3. 自然用户界面（NUI - Natural User Interface）</strong></p>\n<ul>\n<li><strong>形式</strong>：模仿人类自然行为（语音、手势、眼神）。</li>\n<li><strong>技术依赖</strong>：<ul>\n<li><strong>语音识别</strong>：Siri&#x2F;小爱同学唤醒智能家居</li>\n<li><strong>计算机视觉</strong>：手势控制（如微软Kinect）、面部解锁</li>\n<li><strong>触觉反馈</strong>：AR&#x2F;VR设备震动模拟触感</li>\n</ul>\n</li>\n<li><strong>场景</strong>：智能汽车控制、AR游戏（如Pokémon GO）、无障碍交互。</li>\n<li><strong>演进方向</strong>：脑机接口（Neuralink）、全息交互（Meta元宇宙）。</li>\n</ul>\n<h3 id=\"11、网络基础\"><a href=\"#11、网络基础\" class=\"headerlink\" title=\"11、网络基础\"></a>11、网络基础</h3><ul>\n<li><strong>定义：</strong> 多台计算机或设备通过通信链路（有线或无线）连接起来，实现资源共享和信息交换。</li>\n<li><strong>互联网：</strong> 全球最大的计算机网络。</li>\n<li><strong>主要概念</strong>：<ul>\n<li><strong>协议：</strong> 设备通信的规则（如：TCP&#x2F;IP - 互联网的基础协议）。</li>\n<li><strong>IP地址：</strong> 网络中设备的唯一标识符。</li>\n<li><strong>域名系统：</strong> 将便于记忆的域名翻译成 IP 地址。</li>\n<li><strong>万维网：</strong> 建立在互联网上的信息服务系统（网页、超链接等）。</li>\n<li><strong>网络类型：</strong> 局域网、城域网、广域网。</li>\n<li><strong>关键设备：</strong> 路由器、交换机、调制解调器。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12、工作原理\"><a href=\"#12、工作原理\" class=\"headerlink\" title=\"12、工作原理\"></a>12、工作原理</h3><ul>\n<li>用户通过输入设备输入指令或数据。</li>\n<li>数据&#x2F;指令被送入内存。</li>\n<li>CPU 的控制单元从内存中取出指令进行解码。</li>\n<li>CPU 的运算器根据指令要求，从内存中取出数据进行运算。</li>\n<li>运算结果送回内存暂存或送到输出设备。</li>\n<li>结果通过输出设备呈现给用户或存储到外存设备。</li>\n</ul>\n<p>场景：在电脑上通过浏览器看视频，操作系统如何工作？</p>\n<p>1、打开浏览器 UI告诉内核，用户要打开浏览器</p>\n<p>2、内核分配内存以及CPU</p>\n<p>3、访问网络 网络驱动控制网卡下载视频</p>\n<p>4、观看视频 内核会同时处理视频解码、声音</p>\n<p>5、关闭浏览器，释放内存</p>\n<h3 id=\"13、计算机科学与信息技术\"><a href=\"#13、计算机科学与信息技术\" class=\"headerlink\" title=\"13、计算机科学与信息技术\"></a>13、计算机科学与信息技术</h3><ul>\n<li><strong>计算机科学：</strong> 侧重于计算理论、算法、编程语言、计算机体系结构、操作系统、人工智能等基础研究。</li>\n<li><strong>信息技术：</strong> 侧重于应用计算机系统和网络解决实际问题，如系统管理、网络管理、数据库管理、软件开发（偏应用）、技术支持等。</li>\n</ul>\n<h3 id=\"14、计算机的应用领域\"><a href=\"#14、计算机的应用领域\" class=\"headerlink\" title=\"14、计算机的应用领域\"></a>14、计算机的应用领域</h3><ul>\n<li>科学研究、工程设计与制造、通信与媒体、教育与学习、医疗保健、金融交易与服务、企业管理（ERP&#x2F;CRM）、人工智能（智能助手、自动驾驶）、娱乐（游戏、影视）、政府公共服务等。</li>\n</ul>\n<h2 id=\"二、Linux是什么？\"><a href=\"#二、Linux是什么？\" class=\"headerlink\" title=\"二、Linux是什么？\"></a>二、Linux是什么？</h2><p>Linux 是一种<strong>自由、开源、类 Unix 的操作系统内核</strong>，同时也是基于该内核构建的<strong>一整套操作系统和软件生态系统的统称</strong>。简单来说，Linux 是一个强大、稳定且高度可定制的计算机系统基础。</p>\n<h3 id=\"1、核心是-Linux-内核：\"><a href=\"#1、核心是-Linux-内核：\" class=\"headerlink\" title=\"1、核心是 Linux 内核：\"></a>1、核心是 Linux 内核：</h3><ul>\n<li>由芬兰程序员<strong>林纳斯·托瓦兹</strong>在 1991 年作为个人项目开始开发。</li>\n<li>它是最核心的部分，负责管理计算机的硬件资源（CPU、内存、磁盘、网络、外设等），并为软件（应用程序）提供运行的基础服务和接口。</li>\n<li>内核是操作系统的心脏，调度任务，管理文件系统，处理输入输出等。</li>\n</ul>\n<h3 id=\"2、完整的操作系统-Linux-发行版：\"><a href=\"#2、完整的操作系统-Linux-发行版：\" class=\"headerlink\" title=\"2、完整的操作系统 - Linux 发行版：\"></a>2、完整的操作系统 - Linux 发行版：</h3><ul>\n<li>单独的内核本身对普通用户来说无法直接使用。一个完整的、用户友好的操作系统需要包含：<ul>\n<li>内核</li>\n<li>系统工具（如命令行 Shell <code>bash</code>）</li>\n<li>软件包管理系统（用于安装、更新和卸载软件）</li>\n<li>基本的库</li>\n<li>用户界面（图形用户界面 GUI 或命令行界面 CLI）</li>\n<li>各种应用程序（浏览器、办公软件、媒体播放器等）</li>\n</ul>\n</li>\n<li>这就是 <strong>Linux 发行版</strong>的概念。不同的组织、公司或社区会将 Linux 内核、各种自由&#x2F;开源软件以及他们自己开发的管理工具打包在一起，形成可直接安装使用的操作系统，称为 <strong>发行版</strong>。</li>\n<li>常见的著名发行版：<ul>\n<li><strong>Ubuntu：</strong> 用户友好，非常适合桌面用户和个人开发者入门。</li>\n<li><strong>Debian：</strong> 非常稳定，Ubuntu 等许多发行版的基础。</li>\n<li><strong>Fedora：</strong> 由 Red Hat 支持，通常采用较新的技术。</li>\n<li><strong>CentOS Stream &#x2F; Rocky Linux &#x2F; AlmaLinux：</strong> 企业级稳定性和长期支持的典范（尤其面向服务器）。</li>\n<li><strong>openSUSE：</strong> 以强大的配置工具和稳定性著称。</li>\n<li><strong>Arch Linux：</strong> 轻量、高度可定制，适合经验丰富的用户。</li>\n<li><strong>Linux Mint：</strong> 基于 Ubuntu，对桌面用户极其友好，尤其是从 Windows 转过来的用户。</li>\n<li><strong>Kali Linux：</strong> 专注于网络安全测试和渗透测试。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、核心特性：\"><a href=\"#3、核心特性：\" class=\"headerlink\" title=\"3、核心特性：\"></a>3、核心特性：</h3><ul>\n<li><strong>开源与自由</strong>：<ul>\n<li><strong>开源：</strong> Linux 内核和构成发行版的大部分软件的源代码都是完全公开、可自由查看、修改的。这带来了巨大的透明度、安全性和协作创新的可能。</li>\n<li><strong>自由：</strong> 用户拥有<strong>自由运行、学习、修改和重新分发软件（包括修改后的版本）的权利</strong>。这得益于其采用的许可证，主要是 <strong>GNU GPL</strong>。</li>\n</ul>\n</li>\n<li><strong>类 Unix：</strong> Linux 在设计哲学和接口上借鉴了成熟的 Unix 操作系统（如 POSIX 标准），使其具有强大的命令行工具、稳定性、多用户&#x2F;多任务能力以及高度可组合性（小工具组合完成复杂任务）。</li>\n<li><strong>稳定性与可靠性：</strong> Linux 以其在服务器和高负载环境下的稳定性著称，通常可以持续运行数月甚至数年而无需重启。</li>\n<li><strong>安全性：</strong> 得益于开源特性（漏洞更容易被发现和修复）、强大的权限系统设计以及活跃的社区响应，Linux 通常被认为比某些专有操作系统更安全。</li>\n<li><strong>高可定制性：</strong> 用户可以从轻量级的纯命令行系统到功能丰富的桌面环境进行选择。几乎每个组件都可以被替换或调整以满足特定需求。</li>\n<li><strong>免费：</strong> 绝大多数 Linux 发行版可以免费下载、安装和使用。商业支持通常面向企业级服务。</li>\n<li><strong>广泛的硬件支持：</strong> 内核内置支持大量硬件，尤其是在服务器、嵌入式设备和超级计算机上。主流桌面硬件（尤其是较新的）支持也非常好。</li>\n<li><strong>强大的社区支持：</strong> 拥有全球范围内庞大而活跃的用户和开发者社区，提供丰富的文档、教程、论坛和互助渠道。</li>\n</ul>\n<h3 id=\"4、GPLv2\"><a href=\"#4、GPLv2\" class=\"headerlink\" title=\"4、GPLv2\"></a>4、GPLv2</h3><p>Linux 内核采用 <strong>GNU General Public License version 2 (GPLv2)</strong> 作为其开源许可协议。理解 GPL 对理解 Linux 的核心运作理念至关重要：</p>\n<h4 id=\"GPL-的核心宗旨（Copyleft-原则）\"><a href=\"#GPL-的核心宗旨（Copyleft-原则）\" class=\"headerlink\" title=\"GPL 的核心宗旨（Copyleft 原则）\"></a>GPL 的核心宗旨（Copyleft 原则）</h4><h5 id=\"1-保证自由：\"><a href=\"#1-保证自由：\" class=\"headerlink\" title=\"1.保证自由：\"></a>1.保证自由：</h5><p>GPL 的根本目标是确保软件及其衍生作品始终保持自由。它授予用户四项核心自由：</p>\n<ul>\n<li><strong>自由 0：</strong> 运行程序的自由，无论任何目的。</li>\n<li><strong>自由 1：</strong> 学习和修改程序源代码的自由（获取源码是前提）。</li>\n<li><strong>自由 2：</strong> 重新分发软件的自由，帮助他人。</li>\n<li><strong>自由 3：</strong> 将修改后的版本分发给其他人的自由（这要求同时提供修改后的源代码，让社区受益）。</li>\n</ul>\n<h5 id=\"2-“传感染”特性-Copyleft-：\"><a href=\"#2-“传感染”特性-Copyleft-：\" class=\"headerlink\" title=\"2.“传感染”特性 (Copyleft)：\"></a>2.“传感染”特性 (Copyleft)：</h5><p> 这是 GPL 最显著的特点。</p>\n<ul>\n<li>如果你分发基于 GPL 许可软件（如 Linux 内核）的修改版本或包含它的程序，<strong>整个分发也必须遵循 GPLv2</strong>。</li>\n<li>你<strong>必须</strong>向程序的接收者提供<strong>完整的、可修改的源代码</strong>。</li>\n<li><strong>不能</strong>在分发时添加额外的限制（例如，不能禁止用户对软件进行反向工程、不能再许可、不能要求付费购买许可密钥等）。</li>\n<li>这种特性确保自由不会在后续分发中“流失”，自由软件网络会持续扩大。</li>\n</ul>\n<h4 id=\"Linux-内核与-GPLv2-的具体关系\"><a href=\"#Linux-内核与-GPLv2-的具体关系\" class=\"headerlink\" title=\"Linux 内核与 GPLv2 的具体关系\"></a>Linux 内核与 GPLv2 的具体关系</h4><h5 id=\"1-版本选择：\"><a href=\"#1-版本选择：\" class=\"headerlink\" title=\"1.版本选择：\"></a>1.版本选择：</h5><p>Linux 内核严格采用 <strong>GPLv2</strong>，<strong>不是</strong>较新的 GPLv3。林纳斯·托瓦兹 (Linus Torvalds) 和其他核心开发者对此选择有明确立场，主要涉及对 GPLv3 中某些条款（如对硬件限制如 Tivoization 的约束）的顾虑。</p>\n<h5 id=\"2-动态加载模块：\"><a href=\"#2-动态加载模块：\" class=\"headerlink\" title=\"2.动态加载模块：\"></a>2.动态加载模块：</h5><p> 这是一个复杂的法律边界问题。</p>\n<ul>\n<li><strong>观点一（严格派）：</strong> 内核是 GPLv2 代码，任何动态链接到内核的模块（如驱动程序）都被认为与内核形成了一个整体作品，因此<strong>必须</strong>也是 GPLv2（或兼容）许可的。专有（闭源）内核模块违反了 GPL。</li>\n<li><strong>观点二（宽松派 &#x2F; Linus 观点）：</strong> 如果内核模块只使用了内核公开的、稳定的、设计用于模块交互的 API（而不是直接访问内部函数或数据结构），并且是“非衍生的独立作品”，<strong>可能</strong>可以不是 GPL（虽然 LKML 社区强烈不鼓励闭源模块）。</li>\n<li><strong>现实状况：</strong> 许多硬件厂商提供闭源驱动（二进制 blob），但这在法律上存在风险，也被开源社区认为违背了 GPL 的精神。社区和项目（如 FSF）持续努力用开源驱动替代闭源驱动。内核本身也提供了一些机制（如 EXPORT_SYMBOL_GPL）来标记只允许 GPL 模块调用的函数。</li>\n</ul>\n<h5 id=\"3-用户空间程序不受此限：\"><a href=\"#3-用户空间程序不受此限：\" class=\"headerlink\" title=\"3.用户空间程序不受此限：\"></a>3.用户空间程序不受此限：</h5><p>GPLv2 <strong>仅约束</strong>与 Linux 内核直接链接（形成组合作品）的程序，主要是内核模块。在 Linux 上运行的<strong>用户空间应用程序（如 Firefox, LibreOffice）不受内核 GPLv2 的限制</strong>。它们可以使用任何许可（GPL、LGPL、MIT、BSD、Apache 甚至是专有许可）。这是 GNU&#x2F;Linux 系统中“GNU”部分存在的原因之一——GNU 项目提供了在自由许可下的完整用户空间工具链。</p>\n<h4 id=\"GPL-对-Linux-生态系统的意义\"><a href=\"#GPL-对-Linux-生态系统的意义\" class=\"headerlink\" title=\"GPL 对 Linux 生态系统的意义\"></a>GPL 对 Linux 生态系统的意义</h4><h5 id=\"1-成功的基石：\"><a href=\"#1-成功的基石：\" class=\"headerlink\" title=\"1.成功的基石：\"></a>1.成功的基石：</h5><p> GPL 是 Linux 成功的最关键因素之一。它确保了：</p>\n<ul>\n<li><strong>源代码的开放性和可审计性：</strong> 任何人都可以检查、学习、改进代码，提高了安全性、可靠性和创新速度。</li>\n<li><strong>广泛的协作开发：</strong> 企业（如 Red Hat, IBM, Intel, Google）和个人开发者都可以放心贡献，知道他们的贡献永远不会成为某家公司的私有财产。</li>\n<li><strong>自由的保障：</strong> 用户可以确信自己拥有运行、修改和分发自由的权利，不会被供应商锁定。</li>\n</ul>\n<h5 id=\"2-商业支持可行：\"><a href=\"#2-商业支持可行：\" class=\"headerlink\" title=\"2.商业支持可行：\"></a>2.商业支持可行：</h5><p>GPL 允许公司基于 Linux 提供服务（技术支持、定制开发、云服务等）和分发商业发行版（如 RHEL, SUSE），只要它们遵守提供源码的义务（主要针对内核本身的修改）。红帽模式（提供开源代码，销售服务订阅）是成功的典范。</p>\n<h5 id=\"3-巨大的社区和碎片化：\"><a href=\"#3-巨大的社区和碎片化：\" class=\"headerlink\" title=\"3.巨大的社区和碎片化：\"></a>3.巨大的社区和碎片化：</h5><p>GPL 催生了庞大的开发者社区和数量众多的发行版（Debian, Ubuntu, Fedora, Arch 等）。虽然碎片化可能是个挑战，但也提供了巨大的选择和灵活性。</p>\n<h4 id=\"与其他开源许可的主要区别\"><a href=\"#与其他开源许可的主要区别\" class=\"headerlink\" title=\"与其他开源许可的主要区别\"></a>与其他开源许可的主要区别</h4><ul>\n<li><strong>宽松许可 (MIT, BSD, Apache)：</strong> 允许修改版以专有闭源形式再发布（只要求保留版权声明）。用户自由在后续分发中可能丢失。例子：FreeBSD, Android ASOP。</li>\n<li><strong>弱 Copyleft (LGPL)：</strong> 主要设计用于库，允许专有代码链接到 LGPL 库而不“感染”整个程序（只要遵守 LGPL 对库本身的条款）。例子：Glibc, GTK。</li>\n<li><strong>GPL (Strong Copyleft)：</strong> 要求组合作品或衍生作品整体都必须保持 GPL（提供源码）。如 Linux 内核。例子：Linux kernel, GIMP, GCC。</li>\n<li><strong>AGPL：</strong> 针对网络服务，如果修改后通过网络提供软件服务，也必须提供对应的源代码。例子：MongoDB (曾用过)， Nextcloud。</li>\n</ul>\n<h3 id=\"5、Linux与Unix\"><a href=\"#5、Linux与Unix\" class=\"headerlink\" title=\"5、Linux与Unix\"></a>5、Linux与Unix</h3><p>Linux 与 Unix 的关系非常密切，但又有本质区别。可以说 <strong>Linux 是 Unix 思想的继承者和发展者，但不是 Unix 代码的直系后代</strong>。它们共同构成了“Unix-like”操作系统家族的核心。理解它们的关系需要从历史、技术、许可和生态几个维度来看：</p>\n<h4 id=\"1-Unix：开创者与标准\"><a href=\"#1-Unix：开创者与标准\" class=\"headerlink\" title=\"1. Unix：开创者与标准\"></a>1. Unix：开创者与标准</h4><ul>\n<li><strong>起源 (1969)：</strong> 诞生于 AT&amp;T 的贝尔实验室（Ken Thompson, Dennis Ritchie 等人）。用 C 语言重写后（1973 年左右），其可移植性为普及奠定了基础。</li>\n<li>**关键特征：**引入了许多奠基性的概念：<ul>\n<li><strong>“一切皆文件”：</strong> 统一的文件、设备和进程间通信抽象。</li>\n<li><strong>小型、单一目的工具：</strong> <code>grep</code>, <code>sed</code>, <code>awk</code>, <code>ls</code>, <code>cat</code> 等，可通过管道 <code>|</code> 组合 (<code>command1 | command2</code>)，遵循“组合优于继承”原则。</li>\n<li><strong>层次化文件系统：</strong> <code>root (/)</code> 下的树状结构。</li>\n<li><strong>多用户、多任务：</strong> 同时支持多个用户运行多个程序。</li>\n<li><strong>内置强大 Shell：</strong> 作为用户和系统交互的主要界面。</li>\n</ul>\n</li>\n<li><strong>许可与分裂：</strong><ul>\n<li><strong>早期：</strong> AT&amp;T 开始向学术界和商业机构提供源代码许可。</li>\n<li>**衍生分支：**不同机构在 AT&amp;T Unix 源码基础上发展出众多变体：<ul>\n<li><strong>BSD (Berkeley Software Distribution):</strong> 加州大学伯克利分校开发，产生了 FreeBSD、NetBSD、OpenBSD 等。</li>\n<li><strong>商业 Unix:</strong> Sun Solaris (SunOS)、IBM AIX、HP-UX、SCO UnixWare、ATT System V 等。</li>\n</ul>\n</li>\n<li><strong>“Unix 战争”：</strong> 各个商业版本在标准化上竞争激烈，存在互不兼容问题。</li>\n</ul>\n</li>\n<li><strong>标准：</strong> 为解决兼容性问题，诞生了 <strong>POSIX (Portable Operating System Interface)</strong> 标准（由 IEEE 指定）。它定义了操作系统为兼容 Unix 风格所需提供的最小 API 接口标准（如系统调用、shell 行为等）。</li>\n</ul>\n<h4 id=\"2-Linux：开源的新兴力量\"><a href=\"#2-Linux：开源的新兴力量\" class=\"headerlink\" title=\"2. Linux：开源的新兴力量\"></a>2. Linux：开源的新兴力量</h4><ul>\n<li>**起源 (1991)：**由芬兰大学生 Linus Torvalds开发，初衷是创建一个 免费、开源的类 Unix 内核。<ul>\n<li>关键背景：<strong>GNU 计划 (1983年启动，Richard Stallman)</strong>：目标是创建一个完全自由的操作系统 <strong>GNU</strong>，在1991年时几乎完成了所有用户空间工具 (GCC, glibc, bash, coreutils 等)，但唯独缺少一个成熟可用的内核（GNU Hurd 进展缓慢）。</li>\n</ul>\n</li>\n<li><strong>核心特点：</strong><ul>\n<li><strong>只是内核 (Kernel)：</strong> Linux 本身不是完整的操作系统，只是系统的核心（管理硬件、进程、内存等）。用户空间工具主要来自 GNU。</li>\n<li><strong>开源自由：</strong> 采用 <strong>GPLv2</strong> 许可证，保证了其自由传播、修改和使用的权利。</li>\n<li><strong>设计理念：</strong> <em>严格遵循 Unix 哲学</em>，但 <em>不包含任何原始的 AT&amp;T Unix 源代码</em>（是干净的重新实现，避免了法律纠纷）。</li>\n<li><strong>高度模块化：</strong> 支持动态加载内核模块。</li>\n<li><strong>可移植性强：</strong> 支持极其广泛的硬件架构（从超级计算机到嵌入式设备）。</li>\n</ul>\n</li>\n<li><strong>Linux 发行版 (Linux Distribution)：</strong> 一个 完整的操作系统通常 &#x3D; Linux 内核 + GNU 工具链&#x2F;库 + 其他软件（桌面环境、包管理器、应用等）  + 集成安装&#x2F;配置工具。常见的发行版包括：<ul>\n<li><strong>商业支持：</strong> Red Hat Enterprise Linux (RHEL)、SUSE Linux Enterprise Server (SLES)、Ubuntu Pro (Canonical)。</li>\n<li><strong>社区驱动：</strong> Debian、Ubuntu (社区版本)、Fedora (RHEL 上游)、openSUSE (SLES 上游)、Arch Linux、Gentoo 等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-Linux-与-Unix-的关键关系与区别\"><a href=\"#3-Linux-与-Unix-的关键关系与区别\" class=\"headerlink\" title=\"3. Linux 与 Unix 的关键关系与区别\"></a>3. Linux 与 Unix 的关键关系与区别</h4><table>\n<thead>\n<tr>\n<th align=\"left\">特征</th>\n<th align=\"left\">Unix (传统的，如 System V, BSD, AIX, Solaris)</th>\n<th align=\"left\">Linux</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>血统</strong></td>\n<td align=\"left\">直接或间接来源于 AT&amp;T 贝尔实验室的原始 Unix 源代码。</td>\n<td align=\"left\">独立开发，<strong>不包含任何 AT&amp;T Unix 源码</strong>。是一个全新的实现，遵循 Unix 设计理念。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>内核</strong></td>\n<td align=\"left\">单一内核（Monolithic Kernel）或混合内核设计。不同分支内核名称各异（如 Solaris Kernel）。</td>\n<td align=\"left\"><strong>Linux 内核</strong>（也是单一内核设计）。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>许可</strong></td>\n<td align=\"left\"><strong>历史上多为专有许可</strong>：商业 Unix 要求高昂的许可费。BSD 系统采用宽松的开源协议（如 BSD License，允许闭源再分发）。</td>\n<td align=\"left\">内核采用 <strong>GPLv2</strong>（强 Copyleft）。用户空间工具多为 GPL 或 LGPL。<strong>核心原则是自由和开源</strong>。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>所有权</strong></td>\n<td align=\"left\">历史上由 AT&amp;T 所有，后分裂为多个商业实体所有（IBM, Oracle, HPE 等）。BSD 由社区维护。</td>\n<td align=\"left\"><strong>不属于任何单一实体</strong>。由社区（个人和公司）共同开发维护。Linux 商标归 Linus Torvalds 所有。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>标准化</strong></td>\n<td align=\"left\">POSIX 标准的最初目标对象。各大商业版本曾试图主导自己的标准。</td>\n<td align=\"left\"><strong>完全兼容 POSIX 标准</strong>（遵循其 API 和 shell 行为规范）。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>开发模型</strong></td>\n<td align=\"left\">历史上是闭源专有开发。BSD 系列采用开源社区协作模式。</td>\n<td align=\"left\"><strong>大规模的开源协作模式</strong>。任何人都可以参与贡献代码（通过邮件列表、Git）。版本控制明确（Git）。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>变体&#x2F;碎片化</strong></td>\n<td align=\"left\">形成了多个不兼容的商业分支（Solaris, AIX, HP-UX）。BSD 分支（FreeBSD, OpenBSD, NetBSD）相对独立但更兼容。</td>\n<td align=\"left\">存在<strong>大量发行版</strong>（数百个），它们在 <em>软件包管理、默认配置、打包策略、桌面环境、支持周期</em> 上差异很大。<strong>但都使用同一个 Linux 内核</strong>（不同版本），应用层兼容性较好（POSIX + 发行版差异）。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>硬件支持</strong></td>\n<td align=\"left\">传统商业 Unix 通常紧密绑定厂商特定的硬件（RISC 架构，如 SPARC, Power）。</td>\n<td align=\"left\"><strong>支持极其广泛的硬件架构</strong>：x86&#x2F;x86_64, ARM, RISC-V, POWER, MIPS, 等等。硬件驱动生态系统庞大（开源社区驱动 + 厂商贡献）。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>用户 &amp; 用途</strong></td>\n<td align=\"left\">传统上用于高端服务器、工作站和大企业关键任务系统。成本高昂。</td>\n<td align=\"left\"><strong>无处不在</strong>：超级计算机、服务器集群、云计算、数据中心、嵌入式系统、路由器、智能手机(Android 基于 Linux 内核)、桌面&#x2F;笔记本电脑。</td>\n</tr>\n</tbody></table>\n<h3 id=\"6、主要应用领域：\"><a href=\"#6、主要应用领域：\" class=\"headerlink\" title=\"6、主要应用领域：\"></a>6、主要应用领域：</h3><ul>\n<li><strong>服务器：</strong> Linux 是互联网的基石。绝大部分的 Web 服务器、云服务器、数据库服务器等都运行 Linux。</li>\n<li><strong>超级计算机：</strong> 全球性能最强的超级计算机几乎都运行基于 Linux 的系统。</li>\n<li><strong>嵌入式设备：</strong> 智能手机（Android 基于 Linux 内核）、路由器、智能电视、物联网设备、车载娱乐系统等。</li>\n<li><strong>开发者工作站：</strong> 命令行工具、软件包管理和开发环境使其成为开发者的首选，尤其在 Web 开发、云计算、数据科学、人工智能等领域。</li>\n<li><strong>桌面电脑：</strong> 越来越多的用户将 Ubuntu、Fedora、Mint 等作为日常使用的操作系统，替代 Windows 或 macOS。</li>\n<li><strong>基础设施：</strong> 路由器、防火墙、NAS 存储等网络设备大量使用 Linux。</li>\n</ul>\n<h2 id=\"三、Linux目录结构\"><a href=\"#三、Linux目录结构\" class=\"headerlink\" title=\"三、Linux目录结构\"></a>三、Linux目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/            <span class=\"comment\">#根目录</span></span><br></pre></td></tr></table></figure>\n\n<p>起始点，系统上所有的文件都存在这里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root /home  <span class=\"comment\">#家目录</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root        <span class=\"comment\">#存放root的配置文件</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home        <span class=\"comment\">#存放用户的普通文件</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc                                    <span class=\"comment\">#系统配置目录</span></span><br><span class=\"line\">/etc/sysconfig/network-scripts          <span class=\"comment\">#网卡配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">/etc/yum.repos.d/CentOS-Base.repo       <span class=\"comment\">#操作系统软件包</span></span><br><span class=\"line\">/etc/yum.repos.d/CentOS-AppStream.repo  <span class=\"comment\">#应用流软件包</span></span><br><span class=\"line\">/etc/yum.repos.d/CentOS-Extras.repo     <span class=\"comment\">#额外软件补充包</span></span><br><span class=\"line\"></span><br><span class=\"line\">mirrorlist                              <span class=\"comment\">#两种指定仓库位置的配置方式，他的工作方式：直接指定仓库</span></span><br><span class=\"line\">                                        <span class=\"comment\">#工作流程：直接访问指定的URL，下载仓库数据</span></span><br><span class=\"line\">                                        <span class=\"comment\">#如果地址不可达，会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">baseurl                                 <span class=\"comment\">#先访问mirrorlist url的获取镜像地址列表       </span></span><br><span class=\"line\">                                        <span class=\"comment\">#下载出列表，并开始测试响应速度</span></span><br><span class=\"line\">                                        <span class=\"comment\">#选择出最优的镜像进行连接，下载仓库数据</span></span><br><span class=\"line\">                                       </span><br><span class=\"line\">SElinux                                 <span class=\"comment\">#美国国家安全局提出的概念：强制访问控制安全机制，用于增强linux的安全性    </span></span><br><span class=\"line\">                                        <span class=\"comment\">#自主访问控制安全机制 rw</span></span><br><span class=\"line\">                                        <span class=\"comment\">#三种模式：</span></span><br><span class=\"line\">                                        <span class=\"comment\">#enforcing：强制模式（默认）：严格执行安全策略的，违规操作会被阻止</span></span><br><span class=\"line\">                                        <span class=\"comment\">#permissive：标准模式/宽容模式：会允许并记录</span></span><br><span class=\"line\">                                        <span class=\"comment\">#disable：禁用，完全关闭并记录                 </span></span><br><span class=\"line\">                                        <span class=\"comment\">#SElinuxTYPE：targeted：仅保护安全进程；mls：多级安全策略，用于军事领域</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev               <span class=\"comment\">#设备文件目录</span></span><br><span class=\"line\">                   <span class=\"comment\">#存放的是所有硬件设备</span></span><br><span class=\"line\">                   <span class=\"comment\">#权限：仅仅只有root或disk用户组有操作权限</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin               <span class=\"comment\">#系统命令目录</span></span><br><span class=\"line\">/sbin              <span class=\"comment\">#管理员级系统命令，专供超级管理员（root用户）使用</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么linux要把所有命令存放在目录？<br>单用户模式（救援模式、维护模式）下依然可以使用，多为系统运行必需的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var                <span class=\"comment\">#存储动态变化的数据目录，会随着系统运行不断增长</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/log            <span class=\"comment\">#系统和服务日志（如syslog、nginx/access.log）。在能够写入日志的情况下，写入木马，获取shell</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/lib            <span class=\"comment\">#应用程序数据（如 MySQL 数据库/var/lib/mysql）。mysql数据库、docker容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/spool          <span class=\"comment\">#队列数据（如邮件队列 /var/spool/mail）。</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/secure     <span class=\"comment\">#安全认证日志（如 SSH 登录记录）。</span></span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/messages   <span class=\"comment\">#核心系统日志（替代通用 syslog）</span></span><br><span class=\"line\"></span><br><span class=\"line\">/tmp                <span class=\"comment\">#存放临时文件，全局可读写的，重启会清空</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr                <span class=\"comment\">#存储的是静态的用户进程、用户命令、库文件、共享数据</span></span><br></pre></td></tr></table></figure>\n\n<p>数据性质：&#x2F;var 动态变化；&#x2F;tmp 临时数据；&#x2F;usr 静态只读</p>\n<p>是否可以删除？:&#x2F;var 是部分可删；&#x2F;tmp 可删；&#x2F;usr不可删</p>\n<p>是否需要备份？：&#x2F;var部分需要备份（数据库）；&#x2F;tmp不需要备份；&#x2F;user不需要备份</p>\n<p>文件大小？&#x2F;var  10G 以上，日志可能会膨胀；&#x2F;tmp  1G 以内；&#x2F;usr   5G - 20G 左右 Linux 基础系统</p>\n<p>分区情况：&#x2F;var 建议单独分区；&#x2F;tmp 通常会挂载为tmpfs；&#x2F;usr 通常和&#x2F;合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/boot                <span class=\"comment\">#是启动linux系统所需的核心文件</span></span><br><span class=\"line\">                     <span class=\"comment\">#内核kernel就i是存放在这里面</span></span><br><span class=\"line\">                     <span class=\"comment\">#临时根文件系统</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/lib\t             <span class=\"comment\">#核心共享库和内核模块</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/proc\t             <span class=\"comment\">#内核与进程虚拟文件系统（实时系统状态）</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sys                 <span class=\"comment\">#硬件设备虚拟文件系统（配置内核参数）</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt                 <span class=\"comment\">#第三方软件（大型独立应用）</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt                 <span class=\"comment\">#临时挂载点（手动挂载设备）</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/media               <span class=\"comment\">#可移动设备自动挂载点</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四、Linux：一切皆文件\"><a href=\"#四、Linux：一切皆文件\" class=\"headerlink\" title=\"四、Linux：一切皆文件\"></a>四、Linux：一切皆文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> filename                   <span class=\"comment\">#创建文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> file1 file2                <span class=\"comment\">#批量创建文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> dir1                       <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p dir1/dir2               <span class=\"comment\">#创建嵌套目录结构</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -m 750 dir1                <span class=\"comment\">#创建权限为 drwxr-x--- 的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cp</span> 1.txt dir1                    <span class=\"comment\">#复制文件到目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r dir1 dir2                  <span class=\"comment\">#复制目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 1.txt 2.txt                   <span class=\"comment\">#重命名</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 1.txt dir1                    <span class=\"comment\">#移动文件到目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r dir1                       <span class=\"comment\">#删除目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -f dir1                       <span class=\"comment\">#强制删除</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf dir1                      <span class=\"comment\">#强制删除目录及内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#慎用！多用mv 少用rm</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim 1.txt                        <span class=\"comment\">#打开 Vim 文本编辑器来创建或编辑名为 1.txt 的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> 1.txt                        <span class=\"comment\">#查看文件内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">less                             <span class=\"comment\">#分页查看文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> filename | less</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">tail</span>                             <span class=\"comment\">#查看文件末尾  </span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -n 20 filename              <span class=\"comment\">#查看文件末尾20行</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f app.log | grep <span class=\"string\">&quot;ERROR&quot;</span>   <span class=\"comment\">#实时跟踪日志文件并过滤出包含&quot;ERROR&quot;的行</span></span><br></pre></td></tr></table></figure>\n\n","text":"Linux基础内容一、计算机基础1、信息表示 比特： 信息的基本单位（0 或 1）。 二进制系统： 计算机内部所有信息（数字、文本、图像、声音、视频、指令）都用...","permalink":"/post/Linux基础","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"Linux学习","slug":"Linux学习","count":1,"path":"api/tags/Linux学习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">Linux基础内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、计算机基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">1、信息表示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%EF%BC%88%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%9F%B3%EF%BC%89\"><span class=\"toc-text\">2、冯·诺依曼体系结构（现代计算机的基石）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%A1%AC%E4%BB%B6%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E3%80%82\"><span class=\"toc-text\">3、硬件：计算机的物理组成部分。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%BD%AF%E4%BB%B6%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E6%8C%87%E4%BB%A4-%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%90%88%E3%80%82%E7%A1%AC%E4%BB%B6%E6%98%AF%E8%BA%AF%E4%BD%93%EF%BC%8C%E8%BD%AF%E4%BB%B6%E6%98%AF%E7%81%B5%E9%AD%82%E3%80%82\"><span class=\"toc-text\">4、软件：计算机运行的指令&#x2F;程序集合。硬件是躯体，软件是灵魂。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%95%B0%E6%8D%AE%E4%B8%8E%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">5、数据与程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81CPU%E7%9A%84%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">6、CPU的架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">7、操作系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88Process-Management%EF%BC%89\"><span class=\"toc-text\">（1）进程管理（Process Management）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88Memory-Management%EF%BC%89\"><span class=\"toc-text\">（2）内存管理（Memory Management）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%EF%BC%88File-System-Management%EF%BC%89\"><span class=\"toc-text\">（3）文件系统管理（File System Management）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%EF%BC%88I-O-Device-Management%EF%BC%89\"><span class=\"toc-text\">（4）设备管理（I&#x2F;O Device Management）**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%EF%BC%88Security-Protection%EF%BC%89\"><span class=\"toc-text\">（5）安全与权限管理（Security &amp; Protection）**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81%E5%86%85%E6%A0%B8Kernel\"><span class=\"toc-text\">8、内核Kernel</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E6%A0%B8%E7%9A%84%E6%A0%B8%E5%BF%83%E8%81%8C%E8%B4%A3\"><span class=\"toc-text\">内核的核心职责</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E6%A0%B8%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B%EF%BC%9A%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">内核工作流程示例：启动程序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9%E3%80%81%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">9、文件系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">核心功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E6%B5%81%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">主流文件系统对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10%E3%80%81%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2UI\"><span class=\"toc-text\">10、用户界面UI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UI%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">UI的核心作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UI%E7%9A%84%E4%B8%89%E5%A4%A7%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">UI的三大类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11%E3%80%81%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">11、网络基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12%E3%80%81%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">12、工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">13、计算机科学与信息技术</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F\"><span class=\"toc-text\">14、计算机的应用领域</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Linux%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">二、Linux是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A0%B8%E5%BF%83%E6%98%AF-Linux-%E5%86%85%E6%A0%B8%EF%BC%9A\"><span class=\"toc-text\">1、核心是 Linux 内核：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%8C%E6%95%B4%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-Linux-%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%9A\"><span class=\"toc-text\">2、完整的操作系统 - Linux 发行版：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">3、核心特性：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81GPLv2\"><span class=\"toc-text\">4、GPLv2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GPL-%E7%9A%84%E6%A0%B8%E5%BF%83%E5%AE%97%E6%97%A8%EF%BC%88Copyleft-%E5%8E%9F%E5%88%99%EF%BC%89\"><span class=\"toc-text\">GPL 的核心宗旨（Copyleft 原则）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BF%9D%E8%AF%81%E8%87%AA%E7%94%B1%EF%BC%9A\"><span class=\"toc-text\">1.保证自由：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E2%80%9C%E4%BC%A0%E6%84%9F%E6%9F%93%E2%80%9D%E7%89%B9%E6%80%A7-Copyleft-%EF%BC%9A\"><span class=\"toc-text\">2.“传感染”特性 (Copyleft)：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Linux-%E5%86%85%E6%A0%B8%E4%B8%8E-GPLv2-%E7%9A%84%E5%85%B7%E4%BD%93%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">Linux 内核与 GPLv2 的具体关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%EF%BC%9A\"><span class=\"toc-text\">1.版本选择：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97%EF%BC%9A\"><span class=\"toc-text\">2.动态加载模块：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E7%A8%8B%E5%BA%8F%E4%B8%8D%E5%8F%97%E6%AD%A4%E9%99%90%EF%BC%9A\"><span class=\"toc-text\">3.用户空间程序不受此限：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GPL-%E5%AF%B9-Linux-%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">GPL 对 Linux 生态系统的意义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%88%90%E5%8A%9F%E7%9A%84%E5%9F%BA%E7%9F%B3%EF%BC%9A\"><span class=\"toc-text\">1.成功的基石：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%95%86%E4%B8%9A%E6%94%AF%E6%8C%81%E5%8F%AF%E8%A1%8C%EF%BC%9A\"><span class=\"toc-text\">2.商业支持可行：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%92%8C%E7%A2%8E%E7%89%87%E5%8C%96%EF%BC%9A\"><span class=\"toc-text\">3.巨大的社区和碎片化：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与其他开源许可的主要区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81Linux%E4%B8%8EUnix\"><span class=\"toc-text\">5、Linux与Unix</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Unix%EF%BC%9A%E5%BC%80%E5%88%9B%E8%80%85%E4%B8%8E%E6%A0%87%E5%87%86\"><span class=\"toc-text\">1. Unix：开创者与标准</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Linux%EF%BC%9A%E5%BC%80%E6%BA%90%E7%9A%84%E6%96%B0%E5%85%B4%E5%8A%9B%E9%87%8F\"><span class=\"toc-text\">2. Linux：开源的新兴力量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Linux-%E4%B8%8E-Unix-%E7%9A%84%E5%85%B3%E9%94%AE%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. Linux 与 Unix 的关键关系与区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F%EF%BC%9A\"><span class=\"toc-text\">6、主要应用领域：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三、Linux目录结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Linux%EF%BC%9A%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">四、Linux：一切皆文件</span></a></li></ol></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux文件管理与查询","uid":"7e1e754a6541fda39aaf072fd6373097","slug":"Linux文件管理与查询","date":"2025-07-30T02:11:06.000Z","updated":"2025-07-31T07:33:41.774Z","comments":true,"path":"api/articles/Linux文件管理与查询.json","keywords":null,"cover":[],"text":"Linux文件管理与查询一、grep命令基础语法1grep [选项] \"搜索模式\" 文件或目录 常用选项 正则表达式1. 基础语法 . (点)：匹配任意单个字符...","permalink":"/post/Linux文件管理与查询","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":5,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CentOS 8 环境搭建及配置","uid":"1991d92d523634790e777614ebed22a2","slug":"CentOS-8-环境搭建及配置","date":"2025-07-28T13:51:19.000Z","updated":"2025-07-28T13:55:05.216Z","comments":true,"path":"api/articles/CentOS-8-环境搭建及配置.json","keywords":null,"cover":[],"text":"CentOS 8 虚拟机搭建及配置一、下载安装Vmware Workstation在网上找教程，这里使用Vmware Workstation Pro 17 二、...","permalink":"/post/CentOS-8-环境搭建及配置","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"教程","slug":"教程","count":2,"path":"api/tags/教程.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}