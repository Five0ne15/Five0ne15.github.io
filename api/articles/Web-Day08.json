{"title":"Web_Day08","uid":"40cf61e208883ca570f7bbfe014bea40","slug":"Web-Day08","date":"2025-08-20T07:40:53.000Z","updated":"2025-08-20T13:05:00.311Z","comments":true,"path":"api/articles/Web-Day08.json","keywords":null,"cover":[],"content":"<h2 id=\"1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义\"><a href=\"#1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义\" class=\"headerlink\" title=\"1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义\"></a>1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义</h2><h3 id=\"数字型注入\"><a href=\"#数字型注入\" class=\"headerlink\" title=\"数字型注入\"></a>数字型注入</h3><p>当传递参数id&#x3D;1时，页面上显示用户名密码为Dumb，Dumb</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820163138105.png\" alt=\"image-20250820163138105\"></p>\n<p>当传递参数id&#x3D;2-1时，页面上显示用户名密码仍然为Dumb，Dumb</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820163030031.png\" alt=\"image-20250820163030031\"></p>\n<p>这表明了这一关是数字型注入，数据库在收到前端传递的参数时，拼接到SQL语句上，如果传递的参数是数字型，会直接将这个数字去数据库中进行执行，所以当传递id&#x3D;2-1时，2-1的结果为1，数据库用数字1进行查询，结果与id&#x3D;1一致，反之若为字符型，则id&#x3D;2-1查询结果与id&#x3D;2的查询结果一致。</p>\n<p>在源码中也可以清楚的看见传递进来的参数$id，前后没有引号，表明了这是作为数字拼接进SQL语句的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820163406341.png\" alt=\"image-20250820163406341\"></p>\n<h3 id=\"字符型注入\"><a href=\"#字符型注入\" class=\"headerlink\" title=\"字符型注入\"></a>字符型注入</h3><p>当传递参数id&#x3D;2时，页面上显示用户名密码为Angelina，I-kill-you</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820162054249.png\" alt=\"image-20250820162054249\"></p>\n<p>当传递参数id&#x3D;2-1时，页面上显示用户名密码仍然为Angelina，I-kill-you</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820162205364.png\" alt=\"image-20250820162205364\"></p>\n<p>这表明了这一关是字符型注入，数据库在收到前端传递的参数时，拼接到SQL语句上，如果传递的参数是字符型，会从最前面的一位字符作为数字到数据库中进行执行，所以当传递id&#x3D;2-1时，这是个字符，数据库取第一位2进行查询，结果与id&#x3D;2一致，反之若为数字型，则id&#x3D;2-1查询结果与id&#x3D;1的查询结果一致。</p>\n<p>在源码中也可以清楚的看见传递进来的参数$id，前后有引号，表明了这是作为字符拼接进SQL语句的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820162646090.png\" alt=\"image-20250820162646090\"></p>\n<h3 id=\"联合注入\"><a href=\"#联合注入\" class=\"headerlink\" title=\"联合注入\"></a>联合注入</h3><p>在字符型注入靶场，url后面加上<code>?id=222&#39; union select 1,database(),3 --+</code>，可以在用户名位置显示出数据库名</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820164657289.png\" alt=\"image-20250820164657289\"></p>\n<p>结合源码进行分析</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span>=<span class=\"string\">&quot;SELECT * FROM users WHERE id=&#x27;<span class=\"subst\">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>前端传递的参数为<code>222&#39; union select 1,database(),3 --+</code>，将这一个参数拼接到SQL语句中为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sql</span>=<span class=\"string\">&quot;SELECT * FROM users WHERE id=&#x27;222&#x27; union select 1,database(),3 --+&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在union前面的SQL语句是在users表中查询id&#x3D;222的用户信息， union操作要求前后两个select语句的列数必须相同，并且对应列的数据类型需要兼容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; union select null --+</span><br><span class=\"line\">&#x27; union select null,null --+</span><br></pre></td></tr></table></figure>\n\n<p>可以通过上面语句来试探得到该数据库有多少列，或者可以使用order by 1&#x2F;2&#x2F;3… 也可以</p>\n<p>–+表示注释，不执行后面语句</p>\n<p>当前面一条语句查询不到id&#x3D;222的用户名密码时，用户名密码在页面上显示的就是union后面查询到的数据，database()这个函数可以获取到这个数据库名称，会泄露信息给攻击者</p>\n<h3 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h3><p>在字符型注入靶场，也可以使用报错注入，<code>?id=1&#39; and extractvalue(1,concat(0x7e,database(),0x7e))--+</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820195043417.png\" alt=\"image-20250820195043417\"></p>\n<p>现在我们来分析这段注入命令：</p>\n<p><code>and</code>是SQL逻辑运算符，攻击的话一般用来拼接恶意代码。</p>\n<p><code>extractvalue(1, concat(0x7e, database(), 0x7e))</code>这是报错注入并泄露数据的核心部分。</p>\n<p><code>extractvalue(xml_frag, xpath_expr)</code>： 这是 MySQL 的一个 XML 函数。</p>\n<p>它尝试从第一个参数 <code>xml_frag</code>(这里硬编码为 <code>1</code>，一个无效的 XML) 中，根据第二个参数 <code>xpath_expr</code>(XPath 表达式) 提取值。如果 <code>xpath_expr</code>不符合 XPath 语法，该函数就会报错。</p>\n<p><code>concat(0x7e, database(), 0x7e)</code>： 构造 <code>xpath_expr</code>参数。</p>\n<p><code>concat()</code>： 字符串连接函数。</p>\n<p><code>0x7e</code>： 这是十六进制表示的 ASCII 字符 <code>~</code>(波浪号)。用作分隔符，方便在错误信息中识别我们注入的数据。</p>\n<p><code>database()</code>： 获取当前数据库的名称。</p>\n<p>拼接结果： <code>concat()</code>将 <code>~</code>、<code>database()</code>的结果、<code>~</code>连接起来。例如，当前数据库是 <code>security</code>，则 <code>xpath_expr</code>的值变成 <code>~mydb~</code>。</p>\n<p>触发错误： <code>extractvalue(1, &#39;~mydb~&#39;)</code>被执行。因为 <code>&#39;~security~&#39;</code>不是一个有效的 XPath 表达式，函数执行失败，MySQL 会抛出一个错误。</p>\n<p>错误信息泄露：** MySQL 的错误信息会包含这个无效的 XPath 表达式字符串。例如：</p>\n<p><code>XPATH syntax error: &#39;~security~&#39;</code></p>\n<p>攻击者从错误信息中直接看到了数据库名 <code>security</code>。</p>\n<p>为什么在报错注入中，<code>database()</code>这样的查询会被执行，而不是直接被当作错误拒绝？</p>\n<p>这个问题需要从SQL引擎的执行原理来解释。SQL语句在数据库中的处理分为解析、优化、执行三个阶段。当遇到<code>extractvalue(1, concat(0x7e,database(),0x7e))</code>这样的表达式时：</p>\n<p>首先解析器会完整解析整个语句结构，识别出这是一个函数调用，第二个参数是<code>concat</code>函数，而<code>concat</code>函数里又包含子查询。这时候数据库并不知道这个<code>xpath</code>表达式最终会是无效的——它必须先生成执行计划。</p>\n<p>优化器会决定执行顺序。虽然<code>extractvalue</code>最终会报错，但为了计算它的参数值，必须先执行<code>concat</code>函数；而为了执行<code>concat</code>，又必须先执行<code>database()</code>这个子查询。所以实际上子查询是在报错发生前就被执行了。</p>\n<p>执行阶段，数据库会按部就班地：1.执行子查询获取当前数据库名 2.用<code>concat</code>拼接成字符串 3.尝试把这个字符串作为<code>xpath</code>解析 4.发现<code>xpath</code>语法错误抛出异常。关键在于步骤1和2在报错前就完成了。</p>\n<h3 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h3><p>在上方URL后面加上<code>?id=1&#39; and length(database())=8 --+</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820195932318.png\" alt=\"image-20250820195932318\"></p>\n<p>页面显示 You are in………..</p>\n<p>输入<code>?id=1&#39; and length(database())=7 --+</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820200108632.png\" alt=\"image-20250820200108632\"></p>\n<p>页面是空白的，说明第一次执行的命令是正确的，而第二次执行的命令是不正确的，而<code>length(database())=8</code>这个函数说明该数据库名称字符长度为8，这就作为一个有用信息被获取到了</p>\n<p>输入<code>?id=1&#39; and ascii(substr(database(),1,1))=115 --+</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820200347826.png\" alt=\"image-20250820200347826\"></p>\n<p>这表明数据库名称第一个字符的ASCII码值为115，<code>substr(database(),1,1)</code>这个函数是把数据库名称从第1个字符开始取，取1个，外面包一层转换ASCII码，这样接着往下尝试，最终就能得到整个数据库名称</p>\n<h3 id=\"延时盲注\"><a href=\"#延时盲注\" class=\"headerlink\" title=\"延时盲注\"></a>延时盲注</h3><p>传递参数id&#x3D;3，页面显示 You are in………..</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820200749528.png\" alt=\"image-20250820200749528\"></p>\n<p>采用延时盲注的方式，输入<code>?id=3&#39; and if(length(database())=8,sleep(5),1) --+</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820200955729.png\" alt=\"image-20250820200955729\"></p>\n<p>页面在大约5秒后显示出跟刚才一样的内容，这里最主要的是<code>if()</code>函数，<code>length(database())=8</code>这里是条件，<code>sleep(5)</code>用来表示如果前面数据库名称长度真的为8，则执行<code>sleep(5)</code>这个命令，网页会在大约5秒后响应，如果数据库长度不为8，则返回1，页面直接响应</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820201432389.png\" alt=\"image-20250820201432389\"></p>\n<h2 id=\"2、对自己上周编写的网站进行sql注入的尝试\"><a href=\"#2、对自己上周编写的网站进行sql注入的尝试\" class=\"headerlink\" title=\"2、对自己上周编写的网站进行sql注入的尝试\"></a>2、对自己上周编写的网站进行sql注入的尝试</h2><p>使用报错注入成功获得数据库名称</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820210148257.png\" alt=\"image-20250820210148257\"></p>\n<h2 id=\"3、使用sqlmap注入出靶场网站的所有数据库\"><a href=\"#3、使用sqlmap注入出靶场网站的所有数据库\" class=\"headerlink\" title=\"3、使用sqlmap注入出靶场网站的所有数据库\"></a>3、使用sqlmap注入出靶场网站的所有数据库</h2><p>在Kali终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u <span class=\"string\">&quot;http://192.168.232.150/sqli-labs/Less-2/?id=1&quot;</span> --batch --dbs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820201733887.png\" alt=\"image-20250820201733887\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820201935481.png\" alt=\"image-20250820201935481\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250820202038127.png\" alt=\"image-20250820202038127\"></p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"尝试编写代码修复sql注入漏洞\"><a href=\"#尝试编写代码修复sql注入漏洞\" class=\"headerlink\" title=\"尝试编写代码修复sql注入漏洞\"></a>尝试编写代码修复sql注入漏洞</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用预处理语句修复漏洞</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\"><span class=\"variable\">$link</span>, <span class=\"variable\">$reg_id</span>, <span class=\"variable\">$reg_username</span>, <span class=\"variable\">$reg_password</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证输入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$reg_id</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;ID必须为数字&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查ID是否已存在（使用预处理）</span></span><br><span class=\"line\">    <span class=\"variable\">$stmt</span> = <span class=\"variable\">$link</span>-&gt;<span class=\"title function_ invoke__\">prepare</span>(<span class=\"string\">&quot;SELECT id FROM user WHERE id = ?&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$stmt</span>-&gt;<span class=\"title function_ invoke__\">bind_param</span>(<span class=\"string\">&quot;i&quot;</span>, <span class=\"variable\">$reg_id</span>);</span><br><span class=\"line\">    <span class=\"variable\">$stmt</span>-&gt;<span class=\"title function_ invoke__\">execute</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$stmt</span>-&gt;<span class=\"title function_ invoke__\">get_result</span>()-&gt;num_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;存在相同账号，请重新输入账号！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 安全插入（预处理）</span></span><br><span class=\"line\">    <span class=\"variable\">$stmt</span> = <span class=\"variable\">$link</span>-&gt;<span class=\"title function_ invoke__\">prepare</span>(<span class=\"string\">&quot;INSERT INTO user (id, username, password) VALUES (?, ?, ?)&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$stmt</span>-&gt;<span class=\"title function_ invoke__\">bind_param</span>(<span class=\"string\">&quot;iss&quot;</span>, <span class=\"variable\">$reg_id</span>, <span class=\"variable\">$reg_username</span>, <span class=\"variable\">$reg_password</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$stmt</span>-&gt;<span class=\"title function_ invoke__\">execute</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;注册成功！&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录日志但不显示详细错误</span></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">error_log</span>(<span class=\"string\">&quot;注册失败: &quot;</span> . <span class=\"variable\">$stmt</span>-&gt;error);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;注册失败，请稍后再试&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思考假如传参方式是post，sqlmap该如何使用\"><a href=\"#思考假如传参方式是post，sqlmap该如何使用\" class=\"headerlink\" title=\"思考假如传参方式是post，sqlmap该如何使用\"></a>思考假如传参方式是post，sqlmap该如何使用</h2><p>获取http请求，将其保存为文件，再使用sqlmap进行爆破</p>\n","feature":true,"text":"1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义数字型注入当传递参数id=1时，页面上显示用户名密码为Dum...","permalink":"/post/Web-Day08","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Web练习","slug":"Web练习","count":8,"path":"api/tags/Web练习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BD%BF%E7%94%A8sqlilab%E6%BC%94%E7%A4%BA%E6%95%B0%E5%AD%97%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%92%8C%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9B%9B%E7%A7%8Dsql%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%EF%BC%8C%E6%88%AA%E5%9B%BE%E8%AF%B4%E6%98%8E%E6%AF%8F%E4%B8%80%E6%AD%A5%E7%9A%84%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">1、使用sqlilab演示数字型注入和字符型注入的区别，以及四种sql注入类型，截图说明每一步的含义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E5%9E%8B%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">数字型注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">字符型注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">联合注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">报错注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8\"><span class=\"toc-text\">布尔盲注</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8\"><span class=\"toc-text\">延时盲注</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AF%B9%E8%87%AA%E5%B7%B1%E4%B8%8A%E5%91%A8%E7%BC%96%E5%86%99%E7%9A%84%E7%BD%91%E7%AB%99%E8%BF%9B%E8%A1%8Csql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%B0%9D%E8%AF%95\"><span class=\"toc-text\">2、对自己上周编写的网站进行sql注入的尝试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BD%BF%E7%94%A8sqlmap%E6%B3%A8%E5%85%A5%E5%87%BA%E9%9D%B6%E5%9C%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">3、使用sqlmap注入出靶场网站的所有数据库</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%95%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E4%BF%AE%E5%A4%8Dsql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">尝试编写代码修复sql注入漏洞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83%E5%81%87%E5%A6%82%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E6%98%AFpost%EF%BC%8Csqlmap%E8%AF%A5%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">思考假如传参方式是post，sqlmap该如何使用</span></a></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Rust基础","uid":"3e060acf4223ab5c64f7c2cd6bf96484","slug":"Rust基础","date":"2025-08-19T11:43:20.000Z","updated":"2025-08-19T13:49:26.770Z","comments":true,"path":"api/articles/Rust基础.json","keywords":null,"cover":null,"text":"Rust基础1、猜数游戏1234567891011121314use std::io;fn main() { println!(\"Guess the numbe...","permalink":"/post/Rust基础","photos":[],"count_time":{"symbolsCount":434,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Rust","slug":"Rust","count":1,"path":"api/tags/Rust.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}