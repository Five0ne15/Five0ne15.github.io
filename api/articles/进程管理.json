{"title":"进程管理","uid":"d655af595b90ac0e0949f931f50e7fe8","slug":"进程管理","date":"2025-08-06T02:29:29.000Z","updated":"2025-08-06T12:24:32.966Z","comments":true,"path":"api/articles/进程管理.json","keywords":null,"cover":[],"content":"<h1 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h1><h2 id=\"一、进程是什么？\"><a href=\"#一、进程是什么？\" class=\"headerlink\" title=\"一、进程是什么？\"></a>一、进程是什么？</h2><ul>\n<li><p><strong>定义</strong>：<br> 进程是<strong>正在执行的程序实例</strong>。当程序被加载到内存中运行时，操作系统会为其分配资源（CPU、内存、文件等），形成一个独立的执行单元。</p>\n</li>\n<li><p>类比理解：</p>\n<ul>\n<li>程序 &#x3D; 菜谱（静态的指令集合）</li>\n<li>进程 &#x3D; 实际烹饪过程（动态执行，占用厨房、食材等资源）</li>\n</ul>\n</li>\n<li><p>程序 vs 进程：</p>\n<ul>\n<li>程序：二进制文件（静态）如<code>/usr/bin/passwd</code></li>\n<li>进程：程序运行过程（动态），有生命周期及状态</li>\n</ul>\n</li>\n<li><p>进程来源：</p>\n<ul>\n<li>父进程通过 fork 创建子进程</li>\n<li>所有进程的祖先进程：<ul>\n<li>CentOS 5&#x2F;6:  <code>init</code></li>\n<li>CentOS 7&#x2F;8:  <code>systemd</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、进程的核心组成\"><a href=\"#二、进程的核心组成\" class=\"headerlink\" title=\"二、进程的核心组成\"></a>二、进程的核心组成</h2><p>每个进程包含以下关键元素：</p>\n<h3 id=\"1、PID（进程ID）\"><a href=\"#1、PID（进程ID）\" class=\"headerlink\" title=\"1、PID（进程ID）\"></a>1、PID（进程ID）</h3><ul>\n<li>在Linux系统中，PID（Process ID） 是 进程标识符（Process Identifier） 的缩写。它是一个唯一且 非负的整数，用于在操作系统中唯一标识一个正在运行的进程。每个进程（包括程序、服务、后台任务 等）启动时都会被分配一个PID，系统通过PID管理和跟踪进程的生命周期。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps</span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">  2777 pts/0    00:00:00 bash</span><br><span class=\"line\">  3067 pts/0    00:00:00 ps                  <span class=\"comment\">#输第一次ps命令，会产生pid为6761的进程</span></span><br><span class=\"line\">[root@wyf 桌面]# ps</span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">  2777 pts/0    00:00:00 bash</span><br><span class=\"line\">  3074 pts/0    00:00:00 ps                  <span class=\"comment\">#第二次，6768</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也有些服务类的会产生守护进程(也就是一直在运行中的进程，除非关闭了)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -e |grep httpd</span><br><span class=\"line\">  1121 ?        00:00:00 httpd</span><br><span class=\"line\">  1156 ?        00:00:00 httpd</span><br><span class=\"line\">  1160 ?        00:00:00 httpd</span><br><span class=\"line\">  1161 ?        00:00:00 httpd</span><br><span class=\"line\">  1164 ?        00:00:00 httpd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进程还可能会产生子进程。一个父进程复制自己(fork)来创建一个新的子进程。每个进程分配一个唯一的 标识(pid)，其父进程的标识为ppid. 在 centos 8,centos 7中第一个第1个进程为systemd,在centos6及以 前版本第1 个进程为init.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# pstree</span><br><span class=\"line\">systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]</span><br><span class=\"line\">        ├─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class=\"line\">        ├─VGAuthService</span><br><span class=\"line\">        ├─accounts-daemon───2*[&#123;accounts-daemon&#125;]</span><br><span class=\"line\">        ├─alsactl</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、程序代码\"><a href=\"#2、程序代码\" class=\"headerlink\" title=\"2、程序代码\"></a>2、程序代码</h3><ul>\n<li>需要执行的指令（即程序本身）。</li>\n</ul>\n<h3 id=\"3、运行资源\"><a href=\"#3、运行资源\" class=\"headerlink\" title=\"3、运行资源\"></a>3、运行资源</h3><ul>\n<li><strong>内存空间</strong>：代码、数据、堆栈。</li>\n<li><strong>CPU时间片</strong>：由操作系统调度分配。</li>\n<li><strong>文件&#x2F;设备</strong>：打开的文件、网络端口等。</li>\n</ul>\n<h3 id=\"4、运行状态\"><a href=\"#4、运行状态\" class=\"headerlink\" title=\"4、运行状态\"></a>4、运行状态</h3><ul>\n<li>运行状态产生原因：CPU时间片轮转</li>\n<li>如运行中（R）、休眠（S）、僵尸（Z）等（可通过 <code>ps</code> 命令查看）。</li>\n</ul>\n<h2 id=\"三、进程的生命周期\"><a href=\"#三、进程的生命周期\" class=\"headerlink\" title=\"三、进程的生命周期\"></a>三、进程的生命周期</h2><p>进程从创建到结束经历以下阶段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">    A[创建] --&gt; B[就绪] --&gt; C[运行] --&gt; D[等待/休眠] --&gt; C</span><br><span class=\"line\">    C --&gt; E[终止]</span><br><span class=\"line\">    D --&gt; B</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>创建</strong>：通过 <code>fork()</code> 系统调用由父进程生成。</li>\n<li><strong>就绪</strong>：已分配资源，等待CPU调度。</li>\n<li><strong>运行</strong>：CPU正在执行其指令。</li>\n<li><strong>等待</strong>：因I&#x2F;O操作或信号暂停执行。</li>\n<li><strong>终止</strong>：正常结束或被强制杀死（<code>kill</code>）。</li>\n</ul>\n<h2 id=\"四、Linux-进程状态\"><a href=\"#四、Linux-进程状态\" class=\"headerlink\" title=\"四、Linux 进程状态\"></a>四、Linux 进程状态</h2><table>\n<thead>\n<tr>\n<th><strong>状态符号</strong></th>\n<th><strong>英文全称</strong></th>\n<th><strong>中文名</strong></th>\n<th><strong>触发场景</strong></th>\n<th><strong>是否可被强制终止</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>R</code></td>\n<td>Running &#x2F; Runnable</td>\n<td><strong>运行&#x2F;可运行</strong></td>\n<td>正在占用 CPU 或等待 CPU 调度（位于运行队列）</td>\n<td>✅ 是</td>\n</tr>\n<tr>\n<td><code>S</code></td>\n<td>Interruptible Sleep</td>\n<td><strong>可中断睡眠</strong></td>\n<td>等待外部事件完成（如 I&#x2F;O 操作、用户输入），<strong>可被信号唤醒</strong></td>\n<td>✅ 是（但可能失效）</td>\n</tr>\n<tr>\n<td><code>D</code></td>\n<td>Uninterruptible Sleep</td>\n<td><strong>不可中断睡眠</strong></td>\n<td>等待关键硬件操作完成（如磁盘写入），<strong>无视任何信号（包括 <code>kill -9</code>）</strong></td>\n<td>❌ 否</td>\n</tr>\n<tr>\n<td><code>T</code></td>\n<td>Stopped</td>\n<td><strong>暂停&#x2F;停止</strong></td>\n<td>被信号暂停（如 <code>Ctrl+Z</code> 或 <code>kill -STOP</code>）</td>\n<td>✅ 是（需先恢复）</td>\n</tr>\n<tr>\n<td><code>t</code></td>\n<td>Tracing Stop</td>\n<td><strong>调试暂停</strong></td>\n<td>被调试器暂停（如 <code>gdb</code> 设置断点）</td>\n<td>✅ 是</td>\n</tr>\n<tr>\n<td><code>Z</code></td>\n<td>Zombie</td>\n<td><strong>僵尸进程</strong></td>\n<td>进程已结束，但父进程未通过 <code>wait()</code> 回收资源（残留进程描述符）</td>\n<td>❌ 否（需父进程处理）</td>\n</tr>\n<tr>\n<td><code>X</code></td>\n<td>Dead (Exit)</td>\n<td><strong>完全终止</strong></td>\n<td>进程彻底结束（仅在瞬时状态可见，常规命令不显示）</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>I</code></td>\n<td>Idle</td>\n<td><strong>空闲内核线程</strong></td>\n<td>内核线程处于空闲状态（Linux 4.0+ 引入）</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"1、运行-可运行（R）\"><a href=\"#1、运行-可运行（R）\" class=\"headerlink\" title=\"1、运行&#x2F;可运行（R）\"></a>1、运行&#x2F;可运行（R）</h3><ul>\n<li><p><strong>特征</strong>：进程正在使用 CPU 或<strong>等待 CPU 调度</strong>（就绪状态）。</p>\n</li>\n<li><p><strong>查看命令</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top   <span class=\"comment\"># 按 R 排序查看占用 CPU 的进程</span></span><br><span class=\"line\">ps aux | grep <span class=\"string\">&#x27; R &#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2、睡眠状态（S-和-D）\"><a href=\"#2、睡眠状态（S-和-D）\" class=\"headerlink\" title=\"2、睡眠状态（S 和 D）\"></a>2、睡眠状态（S 和 D）</h3><table>\n<thead>\n<tr>\n<th><strong>状态</strong></th>\n<th><strong>典型场景</strong></th>\n<th><strong>风险</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>S 状态</strong></td>\n<td>- 读取用户输入  - 网络请求等待  - 磁盘读写（缓存层响应）</td>\n<td>可能因信号中断导致操作失败</td>\n</tr>\n<tr>\n<td><strong>D 状态</strong></td>\n<td>- 直接磁盘同步写入（<code>O_SYNC</code> 模式）  - 内核关键任务（如 NFS 网络锁）</td>\n<td><strong>系统卡顿主因</strong>！需等待硬件完成，无法强制终止</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>⚠️ <strong>注意</strong>：若系统频繁出现 <code>D</code> 状态进程，需检查磁盘&#x2F;网络硬件状态或驱动问题。</p></blockquote>\n<h3 id=\"3、暂停状态（T-和-t）\"><a href=\"#3、暂停状态（T-和-t）\" class=\"headerlink\" title=\"3、暂停状态（T 和 t）\"></a>3、暂停状态（T 和 t）</h3><ul>\n<li><p><strong>触发方式</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + Z          <span class=\"comment\"># 前台进程暂停（生成 SIGTSTP 信号）</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -STOP PID    <span class=\"comment\"># 手动暂停进程</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>恢复方式</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fg</span> %1             <span class=\"comment\"># 前台恢复（指定作业号）</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span> %1             <span class=\"comment\"># 后台恢复</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -CONT PID    <span class=\"comment\"># 发送继续信号</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4、僵尸进程（Z）\"><a href=\"#4、僵尸进程（Z）\" class=\"headerlink\" title=\"4、僵尸进程（Z）\"></a>4、僵尸进程（Z）</h3><ul>\n<li><strong>成因</strong>：<ul>\n<li>父进程未调用 <code>wait()/waitpid()</code> 回收子进程资源。</li>\n<li>父进程意外终止（子进程由 <code>init</code> 接管后自动回收）。</li>\n</ul>\n</li>\n<li><strong>危害</strong>：占用 PID 资源（最终导致新进程无法创建）。</li>\n<li><strong>解决方案</strong>：<ol>\n<li>重启父进程（自动回收僵尸）。</li>\n<li>手动杀死父进程（僵尸由 <code>init</code> 接管清理）。</li>\n<li><strong>无法直接杀死僵尸进程</strong>（因其已结束）！</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"5、命令操作指南\"><a href=\"#5、命令操作指南\" class=\"headerlink\" title=\"5、命令操作指南\"></a>5、命令操作指南</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看状态</span></span><br><span class=\"line\">ps aux | awk <span class=\"string\">&#x27;&#123;print $8&#125;&#x27;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c  <span class=\"comment\"># 统计各状态进程数量</span></span><br><span class=\"line\">top -b -n 1 | grep -E <span class=\"string\">&#x27; R | S | D | Z &#x27;</span>    <span class=\"comment\"># 过滤特定状态</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、处理异常进程\"><a href=\"#6、处理异常进程\" class=\"headerlink\" title=\"6、处理异常进程\"></a>6、处理异常进程</h3><ul>\n<li><p>D 状态进程：</p>\n<ol>\n<li>排查硬件问题（磁盘坏道、存储挂载）。</li>\n<li>重启关联服务（如 NFS）。</li>\n</ol>\n</li>\n<li><p>Z 状态进程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -p | grep -C 10 &lt;僵尸PID&gt;  <span class=\"comment\"># 定位父进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP &lt;父进程PID&gt;            <span class=\"comment\"># 重启父进程（优雅回收）</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"五、PID\"><a href=\"#五、PID\" class=\"headerlink\" title=\"五、PID\"></a>五、PID</h2><h3 id=\"1、PID的核心作用\"><a href=\"#1、PID的核心作用\" class=\"headerlink\" title=\"1、PID的核心作用\"></a>1、PID的核心作用</h3><h4 id=\"1-唯一标识进程\"><a href=\"#1-唯一标识进程\" class=\"headerlink\" title=\"1.唯一标识进程\"></a>1.唯一标识进程</h4><p>​\t每个进程的PID在系统范围内是唯一的（同一时刻不会重复），通过PID可以精准定位到具体的进程。 </p>\n<h4 id=\"2-进程管理\"><a href=\"#2-进程管理\" class=\"headerlink\" title=\"2.进程管理\"></a>2.进程管理</h4><p>​\t系统工具（如   kill 、 top 、ps）和用户通过PID对进程进行控制，例如： </p>\n<p>​\t终止进程：<code>kill -9 PID</code> </p>\n<p>​\t查看进程资源占用： <code>top -p PID</code> </p>\n<p>​\t调试进程： <code>gdb -p PID</code> </p>\n<h4 id=\"3-进程间通信（IPC）\"><a href=\"#3-进程间通信（IPC）\" class=\"headerlink\" title=\"3.进程间通信（IPC）\"></a>3.进程间通信（IPC）</h4><p>​\t进程间通信（如信号、管道、共享内存）通常需要指定目标进程的PID。 </p>\n<h3 id=\"2、PID的分配规则\"><a href=\"#2、PID的分配规则\" class=\"headerlink\" title=\"2、PID的分配规则\"></a>2、PID的分配规则</h3><h4 id=\"1-取值范围\"><a href=\"#1-取值范围\" class=\"headerlink\" title=\"1.取值范围\"></a>1.取值范围</h4><p>​\tPID从 1 开始分配（系统启动后的第一个进程是  init 或  systemd ，PID&#x3D;1）。 </p>\n<p>​\t最大PID值由内核参数  &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;pid_max 定义（默认通常为  32768 ）。 </p>\n<p>​\t当PID达到最大值时，会循环使用已释放的PID（但不会重复分配给仍在运行的进程）。 </p>\n<h4 id=\"2-回收机制\"><a href=\"#2-回收机制\" class=\"headerlink\" title=\"2.回收机制\"></a>2.回收机制</h4><p>​\t进程终止后，其PID会被释放，供后续新进程使用。 </p>\n<h3 id=\"3、PID的特殊角色\"><a href=\"#3、PID的特殊角色\" class=\"headerlink\" title=\"3、PID的特殊角色\"></a>3、PID的特殊角色</h3><h4 id=\"1-PID-1（Init进程）\"><a href=\"#1-PID-1（Init进程）\" class=\"headerlink\" title=\"1.PID&#x3D;1（Init进程）\"></a>1.PID&#x3D;1（Init进程）</h4><p>​\t系统启动后的第一个进程，负责启动和管理其他所有用户进程。 </p>\n<p>​\t如果PID&#x3D;1的进程终止，系统会触发内核恐慌（Kernel Panic）并崩溃。 </p>\n<h4 id=\"2-父进程PID（PPID）\"><a href=\"#2-父进程PID（PPID）\" class=\"headerlink\" title=\"2.父进程PID（PPID）\"></a>2.父进程PID（PPID）</h4><p>​\t每个进程（除Init）都有父进程（Parent Process），父进程的PID称为  PPID。 </p>\n<p>​\t通过p s -ef查看PPID：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep &lt;进程名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 输出示例：</span></span><br><span class=\"line\"><span class=\"comment\"># UID      PID       PPID       C       STIME      TTY       TIME CMD   </span></span><br><span class=\"line\"><span class=\"comment\"># root     1234        1        0       Aug01       ?        00:00:00 nginx: master process</span></span><br><span class=\"line\"><span class=\"comment\">#第三列（PPID）是父进程的PID（如 1 表示由Init进程启动）。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、进程-vs-线程\"><a href=\"#四、进程-vs-线程\" class=\"headerlink\" title=\"四、进程 vs 线程\"></a>四、进程 vs 线程</h2><table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th>进程</th>\n<th>线程</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>独立性</td>\n<td>资源隔离，崩溃不影响其他进程</td>\n<td>共享同一进程资源，崩溃可能导致整个进程终止</td>\n</tr>\n<tr>\n<td>创建开销</td>\n<td>大（需复制资源）</td>\n<td>小（共享进程资源）</td>\n</tr>\n<tr>\n<td>通信方式</td>\n<td>管道、信号、Socket等</td>\n<td>直接读写共享内存</td>\n</tr>\n<tr>\n<td>典型应用场景</td>\n<td>需要隔离的独立任务（如浏览器）</td>\n<td>高并发任务（如Web服务器）</td>\n</tr>\n</tbody></table>\n<h2 id=\"五、为什么需要进程？\"><a href=\"#五、为什么需要进程？\" class=\"headerlink\" title=\"五、为什么需要进程？\"></a>五、为什么需要进程？</h2><ol>\n<li><p><strong>并发执行</strong></p>\n<p> 操作系统通过进程调度实现多个程序“同时运行”（宏观并行）。</p>\n</li>\n<li><p><strong>资源隔离</strong></p>\n<p> 一个进程崩溃不会直接影响其他进程（提升系统稳定性）。</p>\n</li>\n<li><p><strong>权限控制</strong></p>\n<p> 为不同进程分配不同系统权限（如用户进程 vs 系统守护进程）。</p>\n</li>\n</ol>\n<h2 id=\"六、操作系统的关键支持\"><a href=\"#六、操作系统的关键支持\" class=\"headerlink\" title=\"六、操作系统的关键支持\"></a>六、操作系统的关键支持</h2><ul>\n<li><strong>进程调度器</strong>：决定哪个进程何时使用CPU（如 Linux 的 CFS 调度器）。</li>\n<li><strong>内存管理</strong>：为进程分配&#x2F;回收内存，防止越界访问。</li>\n<li><strong>进程间通信（IPC）</strong>：提供共享内存、消息队列等机制。</li>\n</ul>\n<h2 id=\"七、进程管理（ps、pstree、top）\"><a href=\"#七、进程管理（ps、pstree、top）\" class=\"headerlink\" title=\"七、进程管理（ps、pstree、top）\"></a>七、进程管理（ps、pstree、top）</h2><h3 id=\"1、静态查看进程-ps\"><a href=\"#1、静态查看进程-ps\" class=\"headerlink\" title=\"1、静态查看进程 ps\"></a>1、静态查看进程 ps</h3><p>ps （Process Status）是 Linux 中用于查看当前系统进程状态的工具。它可以显示进程的详细信息，如进程 ID（PID）、CPU 和内存占用、运行时间、命令行参数等。</p>\n<h4 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1.基本语法\"></a>1.基本语法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [选项]</span><br><span class=\"line\">ps aux </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-常用选项\"><a href=\"#2-常用选项\" class=\"headerlink\" title=\"2.常用选项\"></a>2.常用选项</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806164434337.png\" alt=\"image-20250806164434337\"></p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -e</span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">     1 ?        00:00:02 systemd</span><br><span class=\"line\">     2 ?        00:00:00 kthreadd</span><br><span class=\"line\">     3 ?        00:00:00 rcu_gp</span><br><span class=\"line\">     4 ?        00:00:00 rcu_par_gp</span><br><span class=\"line\">     6 ?        00:00:00 kworker/0:0H</span><br><span class=\"line\">     8 ?        00:00:00 mm_percpu_wq</span><br><span class=\"line\">     9 ?        00:00:00 ksoftirqd/0</span><br><span class=\"line\">    10 ?        00:00:00 rcu_sched</span><br><span class=\"line\">    11 ?        00:00:00 migration/0</span><br><span class=\"line\">    12 ?        00:00:00 watchdog/0</span><br><span class=\"line\">    13 ?        00:00:00 cpuhp/0</span><br><span class=\"line\">    14 ?        00:00:00 cpuhp/1</span><br><span class=\"line\">    15 ?        00:00:00 watchdog/1</span><br><span class=\"line\">    16 ?        00:00:00 migration/1</span><br><span class=\"line\">    17 ?        00:00:00 ksoftirqd/1</span><br><span class=\"line\">    19 ?        00:00:00 kworker/1:0H-kblockd</span><br><span class=\"line\">    21 ?        00:00:00 kdevtmpfs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>tty字段解析：</p>\n<p>表示物理控制终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">tty</span></span><br><span class=\"line\">/dev/pts/0</span><br></pre></td></tr></table></figure>\n\n<p>在 ps 命令的输出中，TTY 列表示进程关联的终端设备 </p>\n<p>​\ttty：进程运行在物理控制台终端。 </p>\n<p>​\tpts&#x2F;0：进程运行在伪终端（如图形界面的终端或 SSH 会话）。 </p>\n<p>​\t?：进程不关联任何终端（如守护进程或内核线程）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -a                      <span class=\"comment\">#所有由终端创建的进程，不包含bash\\shell，不包含守护进程（sshd,nginx等）</span></span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">  1878 tty1     00:00:00 gnome-session-b</span><br><span class=\"line\">  1893 tty1     00:00:05 gnome-shell</span><br><span class=\"line\">  1937 tty1     00:00:00 Xwayland</span><br><span class=\"line\">  1957 tty1     00:00:00 ibus-daemon</span><br><span class=\"line\">  1960 tty1     00:00:00 ibus-dconf</span><br><span class=\"line\">  1963 tty1     00:00:00 ibus-x11</span><br><span class=\"line\">  2005 tty1     00:00:00 gsd-xsettings</span><br><span class=\"line\">  2007 tty1     00:00:00 gsd-a11y-settin</span><br><span class=\"line\">  2012 tty1     00:00:00 gsd-clipboard</span><br><span class=\"line\">  2014 tty1     00:00:00 gsd-color</span><br><span class=\"line\">  2023 tty1     00:00:00 gsd-datetime</span><br><span class=\"line\">  2025 tty1     00:00:00 gsd-housekeepin</span><br><span class=\"line\">  2029 tty1     00:00:00 gsd-keyboard</span><br><span class=\"line\">  2033 tty1     00:00:00 gsd-media-keys</span><br><span class=\"line\">  2036 tty1     00:00:00 gsd-mouse</span><br><span class=\"line\">  2041 tty1     00:00:00 gsd-power</span><br><span class=\"line\">  2046 tty1     00:00:00 gsd-print-notif</span><br><span class=\"line\">  2049 tty1     00:00:00 gsd-rfkill</span><br><span class=\"line\">  2060 tty1     00:00:00 gsd-screensaver</span><br><span class=\"line\">  2062 tty1     00:00:00 gsd-sharing</span><br><span class=\"line\">  2067 tty1     00:00:00 gsd-smartcard</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -x   <span class=\"comment\">#守护进程（sshd,nginx)内核线程、系统服务（systemd-journald)、计划任务（cron)、容器（dockerd) </span></span><br><span class=\"line\">   PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\">     1 ?        Ss     0:02 /usr/lib/systemd/systemd --switched-root --system --</span><br><span class=\"line\">     2 ?        S      0:00 [kthreadd]</span><br><span class=\"line\">     3 ?        I&lt;     0:00 [rcu_gp]</span><br><span class=\"line\">     4 ?        I&lt;     0:00 [rcu_par_gp]</span><br><span class=\"line\">     6 ?        I&lt;     0:00 [kworker/0:0H]</span><br><span class=\"line\">     8 ?        I&lt;     0:00 [mm_percpu_wq]</span><br><span class=\"line\">     9 ?        S      0:00 [ksoftirqd/0]</span><br><span class=\"line\">    10 ?        I      0:00 [rcu_sched]</span><br><span class=\"line\">    11 ?        S      0:00 [migration/0]</span><br><span class=\"line\">    12 ?        S      0:00 [watchdog/0]</span><br><span class=\"line\">    13 ?        S      0:00 [cpuhp/0]</span><br><span class=\"line\">    14 ?        S      0:00 [cpuhp/1]</span><br><span class=\"line\">    15 ?        S      0:00 [watchdog/1]</span><br><span class=\"line\">    16 ?        S      0:00 [migration/1]</span><br><span class=\"line\">    17 ?        S      0:00 [ksoftirqd/1]</span><br><span class=\"line\">    19 ?        I&lt;     0:00 [kworker/1:0H-kblockd]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -u root            <span class=\"comment\"># 显示 root 用户的进程</span></span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">     1 ?        00:00:02 systemd</span><br><span class=\"line\">     2 ?        00:00:00 kthreadd</span><br><span class=\"line\">     3 ?        00:00:00 rcu_gp</span><br><span class=\"line\">     4 ?        00:00:00 rcu_par_gp</span><br><span class=\"line\">     6 ?        00:00:00 kworker/0:0H</span><br><span class=\"line\">     8 ?        00:00:00 mm_percpu_wq</span><br><span class=\"line\">     9 ?        00:00:00 ksoftirqd/0</span><br><span class=\"line\">    10 ?        00:00:00 rcu_sched</span><br><span class=\"line\">    11 ?        00:00:00 migration/0</span><br></pre></td></tr></table></figure>\n\n<p>stat 字段解析：在 Linux 的 ps 命令中，STAT（Process State）字段表示进程的当前状态。每个状态由1个主字母和可选的修饰符组成（如 R+、Ss）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806165201413.png\" alt=\"image-20250806165201413\"></p>\n<p><strong>R（Running &#x2F; Runnable）运行&#x2F;可运行状态</strong> </p>\n<p>​\t通俗解释： </p>\n<p>​\t就像在银行排队等叫号的人。 </p>\n<p>​\t\t正在运行：当前正在窗口办理业务（实际在用 CPU）。 </p>\n<p>​\t\t可运行：已经取号，坐在椅子上等待叫号（在 CPU 的等待队列中）。 </p>\n<p>​\t实际场景： </p>\n<p>​\t你用 top 命令看到的 CPU 使用率高的进程，通常处于 R 状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps aux | grep <span class=\"string\">&#x27; R &#x27;</span>         <span class=\"comment\"># 查找 R 状态进程</span></span><br><span class=\"line\">root       3830  0.0  0.0  12320  1060 pts/0    S+   16:56   0:00 grep --color=auto  R </span><br></pre></td></tr></table></figure>\n\n<p> <strong>S（Interruptible Sleep）可中断睡眠</strong> </p>\n<p>​\t通俗解释： </p>\n<p>​\t\t你点外卖后等外卖，但可以边等外卖边刷手机。如果快递到了（事件发生），你就去取；如果不想等了（收到信号），可以取消订单。</p>\n<p>​\t实际场景：</p>\n<p>​\t\t进程等待用户输入（如 vim 未操作时）。 </p>\n<p>​\t\t等待网络响应（如浏览器加载网页时）。 </p>\n<p>​\t\t唤醒方式：按回车键、收到信号（如  Ctrl+C 终止进程）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sleep</span> 100  <span class=\"comment\"># 输入后按 Ctrl+Z，进程进入 S 状态</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>D（Uninterruptible Sleep）不可中断睡眠</strong> </p>\n<p>​\t通俗解释： </p>\n<p>​\t\t你在手术室做手术，医生让你别动。此时即使有人叫你（发信号），你也无法回应，必须等手术完成。 </p>\n<p>​\t实际场景： </p>\n<p>​\t\t进程等待磁盘 I&#x2F;O（如写入大文件到 U 盘，突然拔掉 U 盘）。 </p>\n<p>​\t\t风险：进程卡在 D 状态无法终止（即使 <code>kill -9</code> 也无效）。</p>\n<p>​\t\t解决方案：重启系统或修复硬件&#x2F;驱动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps aux | grep <span class=\"string\">&#x27; D &#x27;</span>         <span class=\"comment\"># 查找 D 状态进程</span></span><br><span class=\"line\">root       3903  0.0  0.0  12320  1052 pts/0    R+   17:01   0:00 grep --color=auto  D </span><br></pre></td></tr></table></figure>\n\n<p><strong>Z（Zombie）僵尸进程</strong></p>\n<p>​\t通俗解释： </p>\n<p>​\t\t餐厅吃完饭，服务员（父进程）没来收拾桌子（回收资源），桌子一直占着。 </p>\n<p>​\t实际场景： </p>\n<p>​\t\t父进程未正确处理子进程的终止状态。 </p>\n<p>​\t\t无害性：僵尸进程不占用 CPU&#x2F;内存，只占一个 PID。 </p>\n<p>​\t\t清理方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 父进程PID  <span class=\"comment\"># 终止父进程，僵尸进程由 init 回收</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>T（Stopped）暂停状态</strong> </p>\n<p>​\t通俗解释： </p>\n<p>​\t\t你正在看视频，突然按下暂停键，画面定格。 </p>\n<p>​\t实际场景： </p>\n<p>​\t\t用 Ctrl+Z 暂停前台进程（如  ping 命令）。</p>\n<p>​\t\t恢复方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">bg</span>  <span class=\"comment\"># 让进程后台继续运行（状态变回 S）</span></span><br><span class=\"line\">$ <span class=\"built_in\">fg</span>  <span class=\"comment\"># 让进程回到前台运行（状态变回 R/S）</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>t（Tracing Stop）调试暂停</strong></p>\n<p>通俗解释： </p>\n<p>​\t程序员用调试器（如 GDB）一步步执行代码，遇到断点暂停。</p>\n<p>实际场景：</p>\n<p>​\t用 <code>gdb</code> 调试程序时，进程会在断点处暂停。</p>\n<p>​\t恢复方法：在调试器中输入 <code>continue</code>。</p>\n<p> <strong>X（Dead）死亡状态</strong></p>\n<p>​\t通俗解释： </p>\n<p>​\t\t人去世后火化，骨灰盒已下葬（进程资源完全释放）。</p>\n<p>​\t实际场景：</p>\n<p>​\t\t进程终止后，内核将其标记为 <code>X</code>，但 <code>ps</code> 几乎不会显示（瞬间消失）。</p>\n<p>​\t\t无需处理：系统自动回收资源。</p>\n<p> <strong>I（Idle）空闲状态（内核线程）</strong></p>\n<p>​\t 通俗解释： </p>\n<p>​\t\t工厂的机器人在没有生产任务时进入待机状态。</p>\n<p>​\t实际场景：</p>\n<p>​\t\t内核线程（如 <code>kworker</code>）在没有任务时的状态。</p>\n<p>​\t\t无需关注：属于系统正常行为。\t</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172155769.png\" alt=\"image-20250806172155769\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172218779.png\" alt=\"image-20250806172218779\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172231240.png\" alt=\"image-20250806172231240\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172243603.png\" alt=\"image-20250806172243603\"></p>\n<p>过滤进程</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172322114.png\" alt=\"image-20250806172322114\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -p 1234         <span class=\"comment\"># 显示 PID=1234 的进程</span></span><br><span class=\"line\">ps -C nginx        <span class=\"comment\"># 显示所有名为 &quot;nginx&quot; 的进程</span></span><br></pre></td></tr></table></figure>\n\n<p>动态排序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172423467.png\" alt=\"image-20250806172423467\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -e --<span class=\"built_in\">sort</span>=-%mem  <span class=\"comment\"># 按内存使用降序显示所有进程</span></span><br></pre></td></tr></table></figure>\n\n<p>树状显示进程关系</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172512385.png\" alt=\"image-20250806172512385\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef --forest  <span class=\"comment\"># 显示进程树</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-输出字段详解\"><a href=\"#3-输出字段详解\" class=\"headerlink\" title=\"3.输出字段详解\"></a>3.输出字段详解</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806172727732.png\" alt=\"image-20250806172727732\"></p>\n<h4 id=\"4-常用组合选项\"><a href=\"#4-常用组合选项\" class=\"headerlink\" title=\"4.常用组合选项\"></a>4.常用组合选项</h4><h5 id=\"（1）经典组合：ps-aux\"><a href=\"#（1）经典组合：ps-aux\" class=\"headerlink\" title=\"（1）经典组合：ps aux\"></a>（1）经典组合：ps aux</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux</span><br></pre></td></tr></table></figure>\n\n<p>说明：BSD 风格，显示所有进程的详细信息。 </p>\n<p>输出字段：USER、PID、%CPU、%MEM、VSZ、RSS、TTY、STAT、START、TIME、COMMAND.</p>\n<h5 id=\"（2）系统进程查看：-ps-ef\"><a href=\"#（2）系统进程查看：-ps-ef\" class=\"headerlink\" title=\"（2）系统进程查看： ps -ef\"></a>（2）系统进程查看： ps -ef</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef</span><br></pre></td></tr></table></figure>\n\n<p>说明：Unix 风格，显示所有进程的完整信息。<br>输出字段：UID、PID、PPID、C、STIME、TTY、TIME、CMD.</p>\n<h4 id=\"5-自定义输出格式\"><a href=\"#5-自定义输出格式\" class=\"headerlink\" title=\"5.自定义输出格式\"></a>5.自定义输出格式</h4><p>使用 -o 选项指定显示的字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -eo pid,user,%cpu,%mem,cmd --<span class=\"built_in\">sort</span>=-%cpu | <span class=\"built_in\">head</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：显示 PID、用户、CPU 占用、内存占用和命令，按 CPU 降序排序。</p>\n<h4 id=\"6-实际应用场景\"><a href=\"#6-实际应用场景\" class=\"headerlink\" title=\"6.实际应用场景\"></a>6.实际应用场景</h4><h5 id=\"（1）查找进程的-PID\"><a href=\"#（1）查找进程的-PID\" class=\"headerlink\" title=\"（1）查找进程的 PID\"></a>（1）查找进程的 PID</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep nginx      <span class=\"comment\"># 查找 nginx 进程的 PID</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）监控资源占用\"><a href=\"#（2）监控资源占用\" class=\"headerlink\" title=\"（2）监控资源占用\"></a>（2）监控资源占用</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -eo pid,%cpu,%mem,cmd --<span class=\"built_in\">sort</span>=-%mem | <span class=\"built_in\">head</span>  <span class=\"comment\"># 查看最耗内存的进程</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（3）杀死进程前的确认\"><a href=\"#（3）杀死进程前的确认\" class=\"headerlink\" title=\"（3）杀死进程前的确认\"></a>（3）杀死进程前的确认</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -p 5678 -o pid,cmd    <span class=\"comment\"># 确认 PID=5678 的进程是否为目标进程</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（4）查看进程树\"><a href=\"#（4）查看进程树\" class=\"headerlink\" title=\"（4）查看进程树\"></a>（4）查看进程树</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef --forest          <span class=\"comment\"># 显示父子进程关系</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、pstree\"><a href=\"#2、pstree\" class=\"headerlink\" title=\"2、pstree\"></a>2、pstree</h3><h4 id=\"1-pstree-是什么？\"><a href=\"#1-pstree-是什么？\" class=\"headerlink\" title=\"1.pstree 是什么？\"></a>1.pstree 是什么？</h4><p><code>pstree</code> 是 Linux 下的进程树查看工具，<strong>以树形图可视化进程间的父子关系</strong>。</p>\n<ul>\n<li><strong>优势</strong>：比 <code>ps</code> 更直观展示进程继承结构。</li>\n<li><strong>根节点</strong>：通常是 <code>systemd</code>（现代系统）或 <code>init</code>（PID&#x3D;1）。</li>\n</ul>\n<h4 id=\"2-核心功能\"><a href=\"#2-核心功能\" class=\"headerlink\" title=\"2.核心功能\"></a>2.核心功能</h4><h5 id=\"（1）基础用法\"><a href=\"#（1）基础用法\" class=\"headerlink\" title=\"（1）基础用法\"></a>（1）基础用法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree        # 默认以树状图显示所有进程</span><br></pre></td></tr></table></figure>\n\n<p>输出示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]</span><br><span class=\"line\">        ├─NetworkManager─┬─dhclient</span><br><span class=\"line\">        │                └─2*[&#123;NetworkManager&#125;]</span><br><span class=\"line\">        ├─sshd───sshd───bash───pstree  # 用户登录链</span><br><span class=\"line\">        └─dockerd───10*[&#123;dockerd&#125;]      # 多线程进程</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）标识符号说明\"><a href=\"#（2）标识符号说明\" class=\"headerlink\" title=\"（2）标识符号说明\"></a>（2）标识符号说明</h5><table>\n<thead>\n<tr>\n<th><strong>符号</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>─</code></td>\n<td>子进程（单进程）</td>\n</tr>\n<tr>\n<td><code>┬─</code></td>\n<td>有多个子进程的父节点</td>\n</tr>\n<tr>\n<td><code>└─</code></td>\n<td>最后一个子进程</td>\n</tr>\n<tr>\n<td><code>*&#123;N&#125;</code></td>\n<td>重复进程&#x2F;线程组的数量</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>守护进程或线程组名</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例如 <code>2*[&#123;NetworkManager&#125;]</code> 表示存在 2 个同名线程。</p></blockquote>\n<h4 id=\"3-常用选项详解\"><a href=\"#3-常用选项详解\" class=\"headerlink\" title=\"3.常用选项详解\"></a>3.常用选项详解</h4><table>\n<thead>\n<tr>\n<th><strong>选项</strong></th>\n<th><strong>作用</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code></td>\n<td><strong>显示 PID</strong></td>\n<td><code>pstree -p</code></td>\n</tr>\n<tr>\n<td><code>-s &lt;PID&gt;</code></td>\n<td><strong>显示指定进程的祖先链</strong></td>\n<td><code>pstree -s 1145</code>（查看 PID&#x3D;1145 的上层）</td>\n</tr>\n<tr>\n<td><code>-u</code></td>\n<td><strong>显示进程所有者切换</strong></td>\n<td><code>pstree -u</code>（显示 UID 变化点）</td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td><strong>显示完整命令行参数</strong></td>\n<td><code>pstree -a</code></td>\n</tr>\n<tr>\n<td><code>-h</code></td>\n<td><strong>高亮当前进程及其祖先</strong></td>\n<td><code>pstree -h $$</code>（高亮当前 Shell）</td>\n</tr>\n<tr>\n<td><code>-H &lt;PID&gt;</code></td>\n<td>高亮指定 PID 的进程及其祖先</td>\n<td><code>pstree -H 1145</code></td>\n</tr>\n<tr>\n<td><code>-T</code></td>\n<td><strong>隐藏线程，只显示进程</strong></td>\n<td><code>pstree -T</code></td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>按 PID 数值排序（默认按进程名排序）</td>\n<td><code>pstree -n</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"4-实战场景示例\"><a href=\"#4-实战场景示例\" class=\"headerlink\" title=\"4.实战场景示例\"></a>4.实战场景示例</h4><h5 id=\"（1）定位进程来源\"><a href=\"#（1）定位进程来源\" class=\"headerlink\" title=\"（1）定位进程来源\"></a>（1）定位进程来源</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -sp 4567     # 显示 PID=4567 的完整祖先链</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd(1)───nginx(1000)───php-fpm(4567)</span><br><span class=\"line\"># 说明：4567 是 nginx 通过 php-fpm 启动的 PHP 进程</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）查看用户进程树\"><a href=\"#（2）查看用户进程树\" class=\"headerlink\" title=\"（2）查看用户进程树\"></a>（2）查看用户进程树</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -u user1     # 只显示 user1 的进程树</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshd(1234)───bash(1235)───vim(1260)</span><br><span class=\"line\"># 用户通过 SSH 登录后启动 vim</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（3）高亮关键进程\"><a href=\"#（3）高亮关键进程\" class=\"headerlink\" title=\"（3）高亮关键进程\"></a>（3）高亮关键进程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -h 4567      # 高亮 PID=4567 及其父进程</span><br></pre></td></tr></table></figure>\n\n<p>输出效果（终端彩色显示）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd─┬─nginx───php-fpm───**4567(php-fpm)**</span><br><span class=\"line\">        └─mysqld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）显示完整命令参数\"><a href=\"#（4）显示完整命令参数\" class=\"headerlink\" title=\"（4）显示完整命令参数\"></a>（4）显示完整命令参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -a           # 展示启动命令参数</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd splash --auto</span><br><span class=\"line\">  └─dockerd -H fd:// --containerd=/run/...</span><br><span class=\"line\">    └─docker run -it --name=ubuntu ubuntu:20.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-高级技巧\"><a href=\"#5-高级技巧\" class=\"headerlink\" title=\"5.高级技巧\"></a>5.高级技巧</h4><h5 id=\"（1）结合-grep-过滤进程\"><a href=\"#（1）结合-grep-过滤进程\" class=\"headerlink\" title=\"（1）结合 grep 过滤进程\"></a>（1）结合 grep 过滤进程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -p | grep -A 5 &#x27;nginx&#x27;  # 显示 nginx 及其子进程（5行上下文）</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）统计进程下的线程数\"><a href=\"#（2）统计进程下的线程数\" class=\"headerlink\" title=\"（2）统计进程下的线程数\"></a>（2）统计进程下的线程数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree -T -p 1145 | wc -l     # 统计 PID=1145 的线程数量</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（3）快速确认是否存在僵尸进程\"><a href=\"#（3）快速确认是否存在僵尸进程\" class=\"headerlink\" title=\"（3）快速确认是否存在僵尸进程\"></a>（3）快速确认是否存在僵尸进程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pstree | grep -C 3 &#x27;Z&#x27;        # 显示含僵尸进程的上下文</span><br></pre></td></tr></table></figure>\n\n<p>输出标识：<code>defunct</code> 或 <code>Z</code>（若使用 <code>pstree -p</code> 显示 PID）。</p>\n<h3 id=\"3、动态查看进程-top\"><a href=\"#3、动态查看进程-top\" class=\"headerlink\" title=\"3、动态查看进程 top\"></a>3、动态查看进程 top</h3><p>top 是 Linux 中最常用的实时系统监控工具，能够动态显示 进程资源占用 和 系统整体状态。它提供了交互式操作，方便用户快速分析性能瓶颈。</p>\n<h4 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top                <span class=\"comment\"># 启动 top</span></span><br><span class=\"line\">q 或 Ctrl+C        <span class=\"comment\"># 退出 top </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806182843598.png\" alt=\"image-20250806182843598\"></p>\n<h4 id=\"2-界面解析\"><a href=\"#2-界面解析\" class=\"headerlink\" title=\"2.界面解析\"></a>2.界面解析</h4><p>top 界面分为<strong>摘要区</strong>（系统概览）和<strong>进程列表区</strong>（实时进程信息） </p>\n<p><strong>上半部分（系统概览）</strong></p>\n<p>​\t1.系统时间&#x2F;负载 </p>\n<p>​\t2.任务统计（176 total） </p>\n<p>​\t3.CPU使用分布（99.7% idle） </p>\n<p>​\t4.内存使用（3.8GB total） </p>\n<p>​\t5.Swap使用（4.0GB free） </p>\n<p><strong>下半部分（进程列表）</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806183004941.png\" alt=\"image-20250806183004941\"></p>\n<h4 id=\"3-交互式命令（运行中按快捷键）\"><a href=\"#3-交互式命令（运行中按快捷键）\" class=\"headerlink\" title=\"3.交互式命令（运行中按快捷键）\"></a>3.交互式命令（运行中按快捷键）</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806183045891.png\" alt=\"image-20250806183045891\"></p>\n<h4 id=\"4-常用操作\"><a href=\"#4-常用操作\" class=\"headerlink\" title=\"4.常用操作\"></a>4.常用操作</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/image-20250806183108501.png\" alt=\"image-20250806183108501\"></p>\n<h3 id=\"4、信号控制\"><a href=\"#4、信号控制\" class=\"headerlink\" title=\"4、信号控制\"></a>4、信号控制</h3><h4 id=\"1-信号列表\"><a href=\"#1-信号列表\" class=\"headerlink\" title=\"1.信号列表\"></a>1.信号列表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">kill</span> -l      <span class=\"comment\"># 查看所有信号</span></span><br><span class=\"line\"> 1) SIGHUP\t 2) SIGINT\t 3) SIGQUIT\t 4) SIGILL\t 5) SIGTRAP</span><br><span class=\"line\"> 6) SIGABRT\t 7) SIGBUS\t 8) SIGFPE\t 9) SIGKILL\t10) SIGUSR1</span><br><span class=\"line\">11) SIGSEGV\t12) SIGUSR2\t13) SIGPIPE\t14) SIGALRM\t15) SIGTERM</span><br><span class=\"line\">16) SIGSTKFLT\t17) SIGCHLD\t18) SIGCONT\t19) SIGSTOP\t20) SIGTSTP</span><br><span class=\"line\">21) SIGTTIN\t22) SIGTTOU\t23) SIGURG\t24) SIGXCPU\t25) SIGXFSZ</span><br><span class=\"line\">26) SIGVTALRM\t27) SIGPROF\t28) SIGWINCH\t29) SIGIO\t30) SIGPWR</span><br><span class=\"line\">31) SIGSYS\t34) SIGRTMIN\t35) SIGRTMIN+1\t36) SIGRTMIN+2\t37) SIGRTMIN+3</span><br><span class=\"line\">38) SIGRTMIN+4\t39) SIGRTMIN+5\t40) SIGRTMIN+6\t41) SIGRTMIN+7\t42) SIGRTMIN+8</span><br><span class=\"line\">43) SIGRTMIN+9\t44) SIGRTMIN+10\t45) SIGRTMIN+11\t46) SIGRTMIN+12\t47) SIGRTMIN+13</span><br><span class=\"line\">48) SIGRTMIN+14\t49) SIGRTMIN+15\t50) SIGRTMAX-14\t51) SIGRTMAX-13\t52) SIGRTMAX-12</span><br><span class=\"line\">53) SIGRTMAX-11\t54) SIGRTMAX-10\t55) SIGRTMAX-9\t56) SIGRTMAX-8\t57) SIGRTMAX-7</span><br><span class=\"line\">58) SIGRTMAX-6\t59) SIGRTMAX-5\t60) SIGRTMAX-4\t61) SIGRTMAX-3\t62) SIGRTMAX-2</span><br><span class=\"line\">63) SIGRTMAX-1\t64) SIGRTMAX\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-常用信号\"><a href=\"#2-常用信号\" class=\"headerlink\" title=\"2.常用信号\"></a>2.常用信号</h4><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>信号编号</strong></th>\n<th align=\"center\"><strong>信号名</strong></th>\n<th align=\"center\"><strong>默认行为</strong></th>\n<th align=\"center\"><strong>使用场景</strong></th>\n<th align=\"center\"><strong>触发命令示例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>1</code></td>\n<td align=\"center\"><code>SIGHUP</code></td>\n<td align=\"center\">终止进程</td>\n<td align=\"center\"><strong>重载配置</strong>（守护进程不终止） 例：nginx 重读配置文件</td>\n<td align=\"center\"><code>kill -1 $(pidof nginx)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>2</code></td>\n<td align=\"center\"><code>SIGINT</code></td>\n<td align=\"center\">终止进程</td>\n<td align=\"center\"><strong>键盘中断</strong>（Ctrl+C）</td>\n<td align=\"center\">前台进程按 <code>Ctrl+C</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>3</code></td>\n<td align=\"center\"><code>SIGQUIT</code></td>\n<td align=\"center\">终止 + 核心转储</td>\n<td align=\"center\"><strong>优雅退出并调试</strong>（Ctrl+\\）</td>\n<td align=\"center\">前台进程按 <code>Ctrl+\\</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>9</code></td>\n<td align=\"center\"><code>SIGKILL</code></td>\n<td align=\"center\"><strong>强制终止</strong></td>\n<td align=\"center\">进程无响应时强制杀死（无视进程状态）⚠️ 慎用！</td>\n<td align=\"center\"><code>kill -9 1145</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>15</code></td>\n<td align=\"center\"><code>SIGTERM</code></td>\n<td align=\"center\">终止进程（默认）</td>\n<td align=\"center\"><strong>优雅终止</strong>（允许进程清理资源后再退出）</td>\n<td align=\"center\"><code>kill 1145</code> 或 <code>kill -15 1145</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>18</code></td>\n<td align=\"center\"><code>SIGCONT</code></td>\n<td align=\"center\">继续运行</td>\n<td align=\"center\"><strong>唤醒被暂停的进程</strong>（<code>SIGSTOP</code> 后恢复）</td>\n<td align=\"center\"><code>kill -18 1145</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>19</code></td>\n<td align=\"center\"><code>SIGSTOP</code></td>\n<td align=\"center\">暂停进程</td>\n<td align=\"center\"><strong>强制暂停</strong>（不可捕获&#x2F;忽略） 类似 <code>Ctrl+Z</code></td>\n<td align=\"center\"><code>kill -19 1145</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>20</code></td>\n<td align=\"center\"><code>SIGTSTP</code></td>\n<td align=\"center\">暂停进程</td>\n<td align=\"center\"><strong>键盘暂停</strong>（Ctrl+Z）（进程可捕获处理）</td>\n<td align=\"center\">前台进程按 <code>Ctrl+Z</code></td>\n</tr>\n</tbody></table>\n<p>⚠️ <strong>重点</strong>：</p>\n<ul>\n<li><strong>优先使用 <code>SIGTERM (15)</code></strong>：给进程清理资源的机会（如保存数据）。</li>\n<li><strong><code>SIGKILL (9)</code> 是最后手段</strong>：可能丢失数据（直接杀进程，内核回收资源）。</li>\n</ul>\n<h4 id=\"3-完整信号列表\"><a href=\"#3-完整信号列表\" class=\"headerlink\" title=\"3.完整信号列表\"></a>3.完整信号列表</h4><table>\n<thead>\n<tr>\n<th align=\"center\">编号</th>\n<th align=\"center\">信号</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code>SIGHUP</code></td>\n<td align=\"center\">控制终端挂起（常用于重载配置）</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><code>SIGINT</code></td>\n<td align=\"center\">中断（Ctrl+C）</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><code>SIGQUIT</code></td>\n<td align=\"center\">退出（生成 Core Dump）</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><code>SIGILL</code></td>\n<td align=\"center\">非法指令（通常因程序损坏触发）</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\"><code>SIGTRAP</code></td>\n<td align=\"center\">调试陷阱（如断点命中）</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\"><code>SIGABRT</code></td>\n<td align=\"center\">进程调用 <code>abort()</code> 时触发</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\"><code>SIGBUS</code></td>\n<td align=\"center\">总线错误（内存访问越界）</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\"><code>SIGFPE</code></td>\n<td align=\"center\">算术异常（除以零）</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\"><code>SIGKILL</code></td>\n<td align=\"center\"><strong>强制终止</strong>（无法被捕获&#x2F;阻塞）</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\"><code>SIGUSR1</code></td>\n<td align=\"center\"><strong>用户自定义信号 1</strong>（可由程序自定义行为）</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\"><code>SIGSEGV</code></td>\n<td align=\"center\">段错误（非法内存访问）</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\"><code>SIGUSR2</code></td>\n<td align=\"center\"><strong>用户自定义信号 2</strong></td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\"><code>SIGPIPE</code></td>\n<td align=\"center\">管道破裂（写入无读端的管道）</td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\"><code>SIGALRM</code></td>\n<td align=\"center\">定时器超时（<code>alarm()</code> 触发）</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\"><code>SIGTERM</code></td>\n<td align=\"center\"><strong>优雅终止</strong>（默认信号）</td>\n</tr>\n<tr>\n<td align=\"center\">16</td>\n<td align=\"center\"><code>SIGSTKFLT</code></td>\n<td align=\"center\">协处理器栈错误</td>\n</tr>\n<tr>\n<td align=\"center\">17</td>\n<td align=\"center\"><code>SIGCHLD</code></td>\n<td align=\"center\">子进程结束通知父进程</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\"><code>SIGCONT</code></td>\n<td align=\"center\"><strong>继续执行被暂停的进程</strong></td>\n</tr>\n<tr>\n<td align=\"center\">19</td>\n<td align=\"center\"><code>SIGSTOP</code></td>\n<td align=\"center\"><strong>强制暂停进程</strong>（不可被捕获&#x2F;忽略）</td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"center\"><code>SIGTSTP</code></td>\n<td align=\"center\">终端暂停（Ctrl+Z，可捕获）</td>\n</tr>\n<tr>\n<td align=\"center\">21</td>\n<td align=\"center\"><code>SIGTTIN</code></td>\n<td align=\"center\">后台进程尝试读取终端输入</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\"><code>SIGTTOU</code></td>\n<td align=\"center\">后台进程尝试写入终端输出</td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\"><code>SIGURG</code></td>\n<td align=\"center\">套接字紧急数据到达</td>\n</tr>\n<tr>\n<td align=\"center\">24</td>\n<td align=\"center\"><code>SIGXCPU</code></td>\n<td align=\"center\">CPU 时间超限</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\"><code>SIGXFSZ</code></td>\n<td align=\"center\">文件大小超限</td>\n</tr>\n<tr>\n<td align=\"center\">26</td>\n<td align=\"center\"><code>SIGVTALRM</code></td>\n<td align=\"center\">虚拟定时器超时（<code>setitimer(ITIMER_VIRTUAL)</code> 触发）</td>\n</tr>\n<tr>\n<td align=\"center\">27</td>\n<td align=\"center\"><code>SIGPROF</code></td>\n<td align=\"center\">性能分析定时器超时</td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\"><code>SIGWINCH</code></td>\n<td align=\"center\">终端窗口大小改变（如调整 SSH 会话窗口）</td>\n</tr>\n<tr>\n<td align=\"center\">29</td>\n<td align=\"center\"><code>SIGIO</code></td>\n<td align=\"center\">异步 I&#x2F;O 事件（<code>fcntl()</code> 设置）</td>\n</tr>\n<tr>\n<td align=\"center\">30</td>\n<td align=\"center\"><code>SIGPWR</code></td>\n<td align=\"center\">电源故障&#x2F;恢复</td>\n</tr>\n<tr>\n<td align=\"center\">31</td>\n<td align=\"center\"><code>SIGSYS</code></td>\n<td align=\"center\">系统调用错误（参数无效）</td>\n</tr>\n<tr>\n<td align=\"center\">34</td>\n<td align=\"center\"><code>SIGRTMIN</code></td>\n<td align=\"center\"><strong>实时信号起始值</strong>（<code>SIGRTMIN</code> 到 <code>SIGRTMAX</code> 共 32 个）</td>\n</tr>\n</tbody></table>\n<p>💡 <strong>实时信号说明</strong>：<br><code>SIGRTMIN</code> 到 <code>SIGRTMAX</code>（通常 34~64）是<strong>可靠信号</strong>，用于自定义高优先级通信（按队列处理，不丢失）。</p>\n<h4 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4.实验\"></a>4.实验</h4><h4 id=\"（1）启动一个httpd服务（会产生多个进程）\"><a href=\"#（1）启动一个httpd服务（会产生多个进程）\" class=\"headerlink\" title=\"（1）启动一个httpd服务（会产生多个进程）\"></a>（1）启动一个httpd服务（会产生多个进程）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# systemctl restart httpd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）查找所有httpd进程\"><a href=\"#（2）查找所有httpd进程\" class=\"headerlink\" title=\"（2）查找所有httpd进程\"></a>（2）查找所有httpd进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd</span><br><span class=\"line\">root       4987      1  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\"><span class=\"comment\">#4987是httpd服务的主进程，其他都是子进程</span></span><br><span class=\"line\">apache     5007   4987  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5008   4987  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5009   4987  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5010   4987  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">root       5354   2777  0 18:52 pts/0    00:00:00 grep --color=auto httpd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）对httpd-的主进程发送信号1\"><a href=\"#（3）对httpd-的主进程发送信号1\" class=\"headerlink\" title=\"（3）对httpd 的主进程发送信号1\"></a>（3）对httpd 的主进程发送信号1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">kill</span> -1 4987                   <span class=\"comment\">#当服务配置变更以后，可以通过-1来刷新主进程</span></span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd            <span class=\"comment\">#主进程pid没变，子进程Pid全变了</span></span><br><span class=\"line\">root       4987      1  0 18:42 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5383   4987  0 18:54 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5384   4987  0 18:54 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5385   4987  0 18:54 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5386   4987  0 18:54 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">root       5607   2777  0 18:55 pts/0    00:00:00 grep --color=auto httpd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）对httpd的主进程发送信号15，查看服务状态\"><a href=\"#（4）对httpd的主进程发送信号15，查看服务状态\" class=\"headerlink\" title=\"（4）对httpd的主进程发送信号15，查看服务状态\"></a>（4）对httpd的主进程发送信号15，查看服务状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">kill</span> -15 4987</span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd</span><br><span class=\"line\">root       5632   2777  0 18:56 pts/0    00:00:00 grep --color=auto httpd</span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd | grep -v grep</span><br><span class=\"line\">[root@wyf 桌面]# systemctl status httpd</span><br><span class=\"line\">● httpd.service - The Apache HTTP Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor prese&gt;</span><br><span class=\"line\">   Active: inactive (dead) since Wed 2025-08-06 18:56:26 CST; 29s ago</span><br><span class=\"line\">     Docs: man:httpd.service(8)</span><br><span class=\"line\">  Process: 4987 ExecStart=/usr/sbin/httpd <span class=\"variable\">$OPTIONS</span> -DFOREGROUND (code=exited, s&gt;</span><br><span class=\"line\"> Main PID: 4987 (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">   Status: <span class=\"string\">&quot;Running, listening on: port 80&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">8月 06 18:42:12 wyf systemd[1]: Starting The Apache HTTP Server...</span><br><span class=\"line\">8月 06 18:42:37 wyf httpd[4987]: AH00558: httpd: Could not reliably determine t&gt;</span><br><span class=\"line\">8月 06 18:42:37 wyf systemd[1]: Started The Apache HTTP Server.</span><br><span class=\"line\">8月 06 18:42:52 wyf httpd[4987]: Server configured, listening on: port 80</span><br><span class=\"line\">8月 06 18:54:43 wyf httpd[4987]: Server configured, listening on: port 80</span><br><span class=\"line\"></span><br><span class=\"line\">[root@wyf 桌面]# </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（5）重新启动httpd服务，对主进程发送信号9\"><a href=\"#（5）重新启动httpd服务，对主进程发送信号9\" class=\"headerlink\" title=\"（5）重新启动httpd服务，对主进程发送信号9\"></a>（5）重新启动httpd服务，对主进程发送信号9</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# systemctl restart httpd</span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd | grep -v grep</span><br><span class=\"line\">root       5669      1  0 18:57 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5693   5669  0 18:57 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5694   5669  0 18:57 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5695   5669  0 18:57 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">apache     5696   5669  0 18:57 ?        00:00:00 /usr/sbin/httpd -DFOREGROUND</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">kill</span> -9 5669</span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep httpd | grep -v grep</span><br><span class=\"line\">[root@wyf 桌面]#                    <span class=\"comment\">#所有进程都没了（centos8中子进程依然存在，可以提供服务）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、进程优先级\"><a href=\"#5、进程优先级\" class=\"headerlink\" title=\"5、进程优先级\"></a>5、进程优先级</h3><p>Nice值：用户空间进程的<strong>静态优先级</strong>，影响内核调度器分配 CPU 时间的权重。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>用户类型</strong></th>\n<th align=\"center\"><strong><code>nice</code> 值范围</strong></th>\n<th align=\"center\"><strong>实际优先级</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">普通用户</td>\n<td align=\"center\"><code>0 ~ 19</code></td>\n<td align=\"center\"><strong>低优先级</strong>（值越大，优先级越低）</td>\n</tr>\n<tr>\n<td align=\"center\"><strong><code>root</code> 用户</strong></td>\n<td align=\"center\"><code>-20 ~ 19</code></td>\n<td align=\"center\"><strong>高优先级</strong>（值越小，优先级越高）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps axo pid,<span class=\"built_in\">command</span>,<span class=\"built_in\">nice</span> --<span class=\"built_in\">sort</span>=-<span class=\"built_in\">nice</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、作业控制\"><a href=\"#6、作业控制\" class=\"headerlink\" title=\"6、作业控制\"></a>6、作业控制</h3><p>Linux可以在一个终端中管理多个任务进程（这些进程称之为job）。 有些进程会占用终端运行很久或是一直占用终端，那么想要运行第二进程 就无法操作了，所以进程可以放到后台执行，这样就不影响在同一个 终端运行第二个进程了。  </p>\n<h4 id=\"1-前后台管理\"><a href=\"#1-前后台管理\" class=\"headerlink\" title=\"1.前后台管理\"></a>1.前后台管理</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">jobs</span> -l                            <span class=\"comment\">#查看当前终端运行的job，目前为空</span></span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">sleep</span> 100000                       <span class=\"comment\">#此命令为等待100000秒，也就是说会占用终端100000秒</span></span><br><span class=\"line\">^C                                                 <span class=\"comment\">#使用ctrl+c取消，此时sleep 100000还没有</span></span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">sleep</span> 100000&amp;                      <span class=\"comment\"># &amp;为后台符号，这样sleep 100000可以在终端后台继续运行</span></span><br><span class=\"line\">[1] 6418</span><br><span class=\"line\">[root@wyf 桌面]# ps -ef | grep <span class=\"built_in\">sleep</span></span><br><span class=\"line\">root       6410   1105  0 19:17 ?        00:00:00 <span class=\"built_in\">sleep</span> 60</span><br><span class=\"line\">root       6418   2777  0 19:18 pts/0    00:00:00 <span class=\"built_in\">sleep</span> 100000</span><br><span class=\"line\">root       6426   2777  0 19:18 pts/0    00:00:00 grep --color=auto <span class=\"built_in\">sleep</span></span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">jobs</span> -l                            <span class=\"comment\">#jobs -l可以查看到了</span></span><br><span class=\"line\">[1]+  6418 运行中               <span class=\"built_in\">sleep</span> 100000 &amp;</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">fg</span> %1                              <span class=\"comment\"># fg命令将job由后台转到终端前台运行，%1代表第1个job</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 100000</span><br><span class=\"line\">^Z                                                 <span class=\"comment\">#按ctrl+z可以将占用前台的进程转到后台暂停执行</span></span><br><span class=\"line\">[1]+  已停止               <span class=\"built_in\">sleep</span> 100000</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">jobs</span> -l</span><br><span class=\"line\">[1]+  6418 停止                  <span class=\"built_in\">sleep</span> 100000       <span class=\"comment\">#确认为stop状态</span></span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">bg</span> %1                              <span class=\"comment\"># bg命令将后台stopped状态的进程转为后台</span></span><br><span class=\"line\">[1]+ <span class=\"built_in\">sleep</span> 100000 &amp;</span><br><span class=\"line\">[root@wyf 桌面]# <span class=\"built_in\">jobs</span> -l</span><br><span class=\"line\">[1]+  6418 运行中               <span class=\"built_in\">sleep</span> 100000 &amp;      <span class=\"comment\">#确认为运行状态</span></span><br><span class=\"line\">[root@wyf 桌面]# </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-注意！！！\"><a href=\"#2-注意！！！\" class=\"headerlink\" title=\"2.注意！！！\"></a>2.注意！！！</h4><p>​\tkill 1：终止PID为1的进程（系统进程） </p>\n<p>​\tkill %1：终止作业号为1的后台进程</p>\n<h3 id=\"7、虚拟文件系统-proc\"><a href=\"#7、虚拟文件系统-proc\" class=\"headerlink\" title=\"7、虚拟文件系统 proc\"></a>7、虚拟文件系统 proc</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/proc/cpuinfo           <span class=\"comment\"># CPU信息</span></span><br><span class=\"line\">/proc/meminfo           <span class=\"comment\"># 内存信息</span></span><br><span class=\"line\">/proc/cmdline           <span class=\"comment\"># 内核启动参数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo       <span class=\"comment\"># 查看CPU详情</span></span><br><span class=\"line\">less /proc/meminfo      <span class=\"comment\"># 查看内存使用</span></span><br></pre></td></tr></table></figure>\n\n","text":"进程管理一、进程是什么？ 定义： 进程是正在执行的程序实例。当程序被加载到内存中运行时，操作系统会为其分配资源（CPU、内存、文件等），形成一个独立的执行单元。...","permalink":"/post/进程管理","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":13,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">进程管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%BF%9B%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">一、进程是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BB%84%E6%88%90\"><span class=\"toc-text\">二、进程的核心组成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81PID%EF%BC%88%E8%BF%9B%E7%A8%8BID%EF%BC%89\"><span class=\"toc-text\">1、PID（进程ID）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">2、程序代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%BF%90%E8%A1%8C%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">3、运行资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">4、运行状态</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">三、进程的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Linux-%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">四、Linux 进程状态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%BF%90%E8%A1%8C-%E5%8F%AF%E8%BF%90%E8%A1%8C%EF%BC%88R%EF%BC%89\"><span class=\"toc-text\">1、运行&#x2F;可运行（R）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%9D%A1%E7%9C%A0%E7%8A%B6%E6%80%81%EF%BC%88S-%E5%92%8C-D%EF%BC%89\"><span class=\"toc-text\">2、睡眠状态（S 和 D）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%9A%82%E5%81%9C%E7%8A%B6%E6%80%81%EF%BC%88T-%E5%92%8C-t%EF%BC%89\"><span class=\"toc-text\">3、暂停状态（T 和 t）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%EF%BC%88Z%EF%BC%89\"><span class=\"toc-text\">4、僵尸进程（Z）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">5、命令操作指南</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">6、处理异常进程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81PID\"><span class=\"toc-text\">五、PID</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81PID%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1、PID的核心作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">1.唯一标识进程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.进程管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%89\"><span class=\"toc-text\">3.进程间通信（IPC）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81PID%E7%9A%84%E5%88%86%E9%85%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2、PID的分配规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">1.取值范围</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2.回收机制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81PID%E7%9A%84%E7%89%B9%E6%AE%8A%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">3、PID的特殊角色</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-PID-1%EF%BC%88Init%E8%BF%9B%E7%A8%8B%EF%BC%89\"><span class=\"toc-text\">1.PID&#x3D;1（Init进程）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%88%B6%E8%BF%9B%E7%A8%8BPID%EF%BC%88PPID%EF%BC%89\"><span class=\"toc-text\">2.父进程PID（PPID）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E8%BF%9B%E7%A8%8B-vs-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">四、进程 vs 线程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%BF%9B%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">五、为什么需要进程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%B3%E9%94%AE%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">六、操作系统的关键支持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88ps%E3%80%81pstree%E3%80%81top%EF%BC%89\"><span class=\"toc-text\">七、进程管理（ps、pstree、top）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%9D%99%E6%80%81%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B-ps\"><span class=\"toc-text\">1、静态查看进程 ps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">2.常用选项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BE%93%E5%87%BA%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">3.输出字段详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%B8%B8%E7%94%A8%E7%BB%84%E5%90%88%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">4.常用组合选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E7%BB%8F%E5%85%B8%E7%BB%84%E5%90%88%EF%BC%9Aps-aux\"><span class=\"toc-text\">（1）经典组合：ps aux</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%EF%BC%9A-ps-ef\"><span class=\"toc-text\">（2）系统进程查看： ps -ef</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">5.自定义输出格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6.实际应用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E6%9F%A5%E6%89%BE%E8%BF%9B%E7%A8%8B%E7%9A%84-PID\"><span class=\"toc-text\">（1）查找进程的 PID</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E7%9B%91%E6%8E%A7%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8\"><span class=\"toc-text\">（2）监控资源占用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%E5%89%8D%E7%9A%84%E7%A1%AE%E8%AE%A4\"><span class=\"toc-text\">（3）杀死进程前的确认</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E6%A0%91\"><span class=\"toc-text\">（4）查看进程树</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81pstree\"><span class=\"toc-text\">2、pstree</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-pstree-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1.pstree 是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">2.核心功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">（1）基础用法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">（2）标识符号说明</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">3.常用选项详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%AE%9E%E6%88%98%E5%9C%BA%E6%99%AF%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4.实战场景示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E5%AE%9A%E4%BD%8D%E8%BF%9B%E7%A8%8B%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">（1）定位进程来源</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B%E6%A0%91\"><span class=\"toc-text\">（2）查看用户进程树</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E9%AB%98%E4%BA%AE%E5%85%B3%E9%94%AE%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">（3）高亮关键进程</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E6%98%BE%E7%A4%BA%E5%AE%8C%E6%95%B4%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">（4）显示完整命令参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">5.高级技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E7%BB%93%E5%90%88-grep-%E8%BF%87%E6%BB%A4%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">（1）结合 grep 过滤进程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E7%BB%9F%E8%AE%A1%E8%BF%9B%E7%A8%8B%E4%B8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%95%B0\"><span class=\"toc-text\">（2）统计进程下的线程数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E5%BF%AB%E9%80%9F%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">（3）快速确认是否存在僵尸进程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8A%A8%E6%80%81%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B-top\"><span class=\"toc-text\">3、动态查看进程 top</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.基础语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%95%8C%E9%9D%A2%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">2.界面解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%91%BD%E4%BB%A4%EF%BC%88%E8%BF%90%E8%A1%8C%E4%B8%AD%E6%8C%89%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%89\"><span class=\"toc-text\">3.交互式命令（运行中按快捷键）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.常用操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BF%A1%E5%8F%B7%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">4、信号控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E5%8F%B7%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">1.信号列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E4%BF%A1%E5%8F%B7\"><span class=\"toc-text\">2.常用信号</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%AE%8C%E6%95%B4%E4%BF%A1%E5%8F%B7%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.完整信号列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">4.实验</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAhttpd%E6%9C%8D%E5%8A%A1%EF%BC%88%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B%EF%BC%89\"><span class=\"toc-text\">（1）启动一个httpd服务（会产生多个进程）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89httpd%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">（2）查找所有httpd进程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E5%AF%B9httpd-%E7%9A%84%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%8F%91%E9%80%81%E4%BF%A1%E5%8F%B71\"><span class=\"toc-text\">（3）对httpd 的主进程发送信号1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E5%AF%B9httpd%E7%9A%84%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%8F%91%E9%80%81%E4%BF%A1%E5%8F%B715%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">（4）对httpd的主进程发送信号15，查看服务状态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8httpd%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%AF%B9%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%8F%91%E9%80%81%E4%BF%A1%E5%8F%B79\"><span class=\"toc-text\">（5）重新启动httpd服务，对主进程发送信号9</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">5、进程优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BD%9C%E4%B8%9A%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">6、作业控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1.前后台管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%B3%A8%E6%84%8F%EF%BC%81%EF%BC%81%EF%BC%81\"><span class=\"toc-text\">2.注意！！！</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-proc\"><span class=\"toc-text\">7、虚拟文件系统 proc</span></a></li></ol></li></ol></li></ol>","author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"计划任务","uid":"3e7fe2ca73cd20125c7985e6b77d8968","slug":"计划任务","date":"2025-08-06T07:24:48.000Z","updated":"2025-08-06T12:26:29.464Z","comments":true,"path":"api/articles/计划任务.json","keywords":null,"cover":[],"text":"计划任务一、 计划任务概述1.1 什么是计划任务？​ 定义：在特定时间自动执行预先设定的命令或脚本。 ​ 核心用途： ​ 延迟执行（如30秒后重启服务）。 ​ ...","permalink":"/post/计划任务","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":13,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"重定向和管道","uid":"af2db19dd72297d09de218eff118e887","slug":"重定向和管道","date":"2025-08-05T09:02:38.000Z","updated":"2025-08-05T11:34:37.578Z","comments":true,"path":"api/articles/重定向和管道.json","keywords":null,"cover":[],"text":"重定向和管道一、重定向1.文件描述符（FD）定义：在 Linux 中，文件描述符（File Descriptor）是一个非负整数，用于唯一标识一个进程（程序） ...","permalink":"/post/重定向和管道","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":13,"path":"api/tags/Linux.json"}],"author":{"name":"wyf","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Five0ne15/picgo_pic@main/picgo_picture/18ca1dd2a86b2210b1ab142498bcf0b0.jpg","link":"/","description":"不知道应该写点什么，就这么看着吧","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}